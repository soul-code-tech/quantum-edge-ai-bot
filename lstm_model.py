# lstm_model.py ‚Äî –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø ‚Äî –ë–ï–ó –û–ü–ê–°–ù–´–• –ü–û–í–¢–û–†–ù–´–• –û–ë–£–ß–ï–ù–ò–ô
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import LSTM, Dense, Dropout
import os

class LSTMPredictor:
    def __init__(self, lookback=60, model_dir="models"):
        self.lookback = lookback
        self.scaler = MinMaxScaler(feature_range=(0, 1))
        self.model = None
        self.is_trained = False
        self.model_dir = model_dir
        os.makedirs(self.model_dir, exist_ok=True)

    def prepare_features(self, df):
        df_features = df[['close', 'volume', 'rsi', 'sma20', 'atr']].copy().dropna()
        scaled = self.scaler.fit_transform(df_features)
        return scaled

    def create_sequences(self, data):
        X, y = [], []
        for i in range(self.lookback, len(data)):
            X.append(data[i-self.lookback:i])
            y.append(1 if data[i, 0] > data[i-1, 0] else 0)
        return np.array(X), np.array(y)

    def build_model(self, input_shape):
        model = Sequential()
        model.add(LSTM(64, return_sequences=True, input_shape=input_shape))
        model.add(Dropout(0.3))
        model.add(LSTM(32, return_sequences=False))
        model.add(Dropout(0.3))
        model.add(Dense(16, activation='relu'))
        model.add(Dense(1, activation='sigmoid'))
        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
        self.model = model

    def train(self, df, symbol):
        """–û–±—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ —Ñ–∞–π–ª ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!"""
        print(f"üß† –û–±—É—á–∞–µ–º LSTM-–º–æ–¥–µ–ª—å –¥–ª—è {symbol}...")
        data = self.prepare_features(df)
        X, y = self.create_sequences(data)
        if len(X) == 0:
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return

        X = X.reshape((X.shape[0], X.shape[1], 5))
        self.build_model(input_shape=(X.shape[1], X.shape[2]))
        self.model.fit(X, y, epochs=10, batch_size=32, verbose=0)

        # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –ú–û–î–ï–õ–¨ –í –§–ê–ô–õ ‚Äî –≠–¢–û –ö–õ–Æ–ß–ï–í–û–ï!
        model_path = os.path.join(self.model_dir, f"{symbol}.keras")
        self.model.save(model_path)
        self.is_trained = True
        print(f"‚úÖ LSTM –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {model_path}")

    def predict_next(self, df, symbol):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –∏–Ω–∞—á–µ –æ–±—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º"""
        model_path = os.path.join(self.model_dir, f"{symbol}.keras")

        # ‚úÖ –ü–†–û–í–ï–†–ö–ê: –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –º–æ–¥–µ–ª—å?
        if os.path.exists(model_path):
            try:
                self.model = load_model(model_path)
                self.is_trained = True
                print(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è {symbol}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å {model_path}: {e}")
                self.is_trained = False

        # ‚úÖ –ï–°–õ–ò –ù–ï–¢ ‚Äî –û–ë–£–ß–ê–ï–ú –ò –°–û–•–†–ê–ù–Ø–ï–ú (–¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó!)
        if not self.is_trained:
            self.train(df, symbol)

        # ‚úÖ –ü–†–û–ì–ù–û–ó
        data = self.prepare_features(df)
        last_sequence = data[-self.lookback:].reshape(1, self.lookback, 5)
        prob = self.model.predict(last_sequence, verbose=0)[0][0]
        return prob
