# lstm_model.py ‚Äî –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

class LSTMPredictor:
    def __init__(self, lookback=60, features=5):
        self.lookback = lookback
        self.features = features  # close, volume, rsi, sma20, atr
        self.scaler = MinMaxScaler(feature_range=(0, 1))
        self.model = None
        self.is_trained = False

    def prepare_features(self, df):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏: close, volume, rsi, sma20, atr"""
        df_features = df[['close', 'volume', 'rsi', 'sma20', 'atr']].copy()
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        scaled = self.scaler.fit_transform(df_features)
        return scaled

    def create_sequences(self, data):
        X, y = [], []
        for i in range(self.lookback, len(data)):
            X.append(data[i-self.lookback:i])  # 60 —Å–≤–µ—á–µ–π –ø–æ 5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            # y = 1 –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–µ, 0 –µ—Å–ª–∏ —É–ø–∞–ª–∞
            y.append(1 if data[i, 0] > data[i-1, 0] else 0)
        return np.array(X), np.array(y)

    def build_model(self):
        model = Sequential()
        model.add(LSTM(64, return_sequences=True, input_shape=(self.lookback, self.features)))
        model.add(Dropout(0.3))
        model.add(LSTM(32, return_sequences=False))
        model.add(Dropout(0.3))
        model.add(Dense(16, activation='relu'))
        model.add(Dense(1, activation='sigmoid'))  # 0-1: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞
        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
        self.model = model

    def train(self, df):
        print("üß† –û–±—É—á–∞–µ–º LSTM-–º–æ–¥–µ–ª—å –Ω–∞ 200+ —Å–≤–µ—á–∞—Ö...")
        data = self.prepare_features(df)
        X, y = self.create_sequences(data)
        X = X.reshape((X.shape[0], X.shape[1], self.features))  # (samples, timesteps, features)
        
        self.build_model()
        self.model.fit(X, y, epochs=10, batch_size=32, verbose=0)
        self.is_trained = True
        print("‚úÖ LSTM –æ–±—É—á–µ–Ω–∞!")

    def predict_next(self, df):
        if not self.is_trained:
            self.train(df)
        
        data = self.prepare_features(df)
        last_sequence = data[-self.lookback:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–≤–µ—á–µ–π
        last_sequence = last_sequence.reshape(1, self.lookback, self.features)
        
        prob = self.model.predict(last_sequence, verbose=0)[0][0]
        return prob  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1
