# trainer.py
import os
import time
import pickle
import logging
import requests
import zipfile
import shutil
from sklearn.model_selection import train_test_split
from data_fetcher import get_bars
from strategy import calculate_strategy_signals
from lstm_model import EnsemblePredictor
import ccxt

logger = logging.getLogger("trainer")

MODEL_DIR = "/tmp/lstm_weights"
os.makedirs(MODEL_DIR, exist_ok=True)

def model_path(symbol: str) -> str:
    return os.path.join(MODEL_DIR, symbol.replace("-", "") + ".pkl")

def download_weights():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–µ—Å–∞ –∏–∑ –≤–µ—Ç–∫–∏ weights –≤ /tmp/lstm_weights/"""
    logger.info("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –≤–µ—Å–∞ –∏–∑ GitHub...")
    zip_path = "/tmp/weights.zip"
    try:
        r = requests.get("https://github.com/soul-code-tech/quantum-edge-ai-bot/archive/refs/heads/weights.zip", stream=True, timeout=30)
        if r.status_code != 200:
            logger.warning(f"GitHub –≤–µ—Ä–Ω—É–ª {r.status_code} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
            return
        with open(zip_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
        if not zipfile.is_zipfile(zip_path):
            logger.warning("–°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ ZIP")
            os.remove(zip_path)
            return
        with zipfile.ZipFile(zip_path, 'r') as z:
            z.extractall("/tmp")
        src = f"/tmp/quantum-edge-ai-bot-weights/weights"
        if os.path.exists(src):
            shutil.rmtree(MODEL_DIR, ignore_errors=True)
            shutil.move(src, MODEL_DIR)
            logger.info("‚úÖ –í–µ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub")
        else:
            logger.warning("–ü–∞–ø–∫–∞ weights –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤–µ")
        os.remove(zip_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Å–æ–≤: {e}")

def market_exists(symbol: str) -> bool:
    try:
        exchange = ccxt.bingx({'options': {'defaultType': 'swap'}, 'enableRateLimit': True})
        exchange.load_markets()
        if symbol in exchange.markets:
            market = exchange.markets[symbol]
            return market.get('type') == 'swap' and market.get('active')
        return False
    except Exception as e:
        logger.warning(f"market_exists({symbol}) error: {e}")
        return False

def validate_model(model, df, bars_back=400):
    try:
        data = model.prepare_features(df.tail(bars_back))
        if len(data) < 100:
            return False
        X, y = model.create_sequences(data)
        if len(X) < 20:
            return False
        X = X.reshape((X.shape[0], X.shape[1], 5))
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
        model.build_model((X.shape[1], X.shape[2]))
        model.model.fit(X_train, y_train, epochs=1, verbose=0)
        _, acc = model.model.evaluate(X_test, y_test, verbose=0)
        logger.info(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è {model_path('dummy').split('/')[-1]}: acc={acc:.3f}")
        return acc >= 0.52
    except Exception as e:
        logger.error(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {e}")
        return False

def train_one(symbol: str, lookback: int = 60, epochs: int = 5) -> bool:
    try:
        if not market_exists(symbol):
            logger.info(f"‚ùå {symbol}: —Ä—ã–Ω–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ BingX ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return False

        logger.info(f"üß† Ensemble-–æ–±—É—á–µ–Ω–∏–µ {symbol} ({epochs} —ç–ø–æ—Ö)")
        df = get_bars(symbol, "1h", 500)
        if df is None or len(df) < 300:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return False

        df = calculate_strategy_signals(df, symbol, 60)
        ensemble = EnsemblePredictor(lookbacks=(60, 90))
        ensemble.train(df, epochs=epochs, bars_back=400)

        if not validate_model(ensemble, df):
            logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {symbol} –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            return False

        weight_file = model_path(symbol).replace(".pkl", ".weights.h5")
        ensemble.model.save_weights(weight_file)
        with open(model_path(symbol), "wb") as fh:
            pickle.dump({"ensemble": ensemble}, fh)
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {symbol} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {symbol}: {e}")
        return False

def load_model(symbol: str, lookback: int = 60):
    path = model_path(symbol)
    if not os.path.exists(path):
        logger.info(f"‚ö†Ô∏è –§–∞–π–ª –º–æ–¥–µ–ª–∏ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        return None
    try:
        with open(path, "rb") as fh:
            bundle = pickle.load(fh)
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {symbol} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
        return bundle["ensemble"]
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {symbol}: {e}")
        return None

def initial_train_all(symbols, epochs=5):
    logger.info(f"üß† –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ {len(symbols)} –ø–∞—Ä: {symbols}")
    ok = 0
    for s in symbols:
        if train_one(s, epochs=epochs):
            ok += 1
            logger.info(f"‚úÖ {s} –æ–±—É—á–µ–Ω–∞")
        else:
            logger.warning(f"‚ùå {s} –Ω–µ –æ–±—É—á–µ–Ω–∞")
        time.sleep(2)
    logger.info(f"üß† –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {ok}/{len(symbols)} –æ–±—É—á–µ–Ω–æ.")

def sequential_trainer(symbols, interval=3600, epochs=2):
    """
    –î–æ–æ–±—É—á–∞–µ—Ç –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å —Ä–∞–∑ –≤ `interval` —Å–µ–∫—É–Ω–¥ –Ω–∞ `epochs` —ç–ø–æ—Ö
    """
    idx = 0
    while True:
        sym = symbols[idx % len(symbols)]
        logger.info(f"üîÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å {sym} –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è...")
        if not load_model(sym):
            logger.info(f"‚è≥ –û–±—É—á–∞–µ–º {sym} —Å –Ω—É–ª—è...")
            train_one(sym, epochs=epochs)
        else:
            logger.info(f"‚è≥ –î–æ–æ–±—É—á–∞–µ–º {sym}...")
            train_one(sym, epochs=epochs)
        idx += 1
        time.sleep(interval)
