# trainer.py
import os, time, pickle, threading, signal, sys
from data_fetcher import get_bars
from lstm_model import LSTMPredictor
from strategy import calculate_strategy_signals

MODEL_DIR = "/tmp/lstm_weights"
os.makedirs(MODEL_DIR, exist_ok=True)

def model_path(symbol: str) -> str:
    return os.path.join(MODEL_DIR, symbol.replace("-", "") + ".pkl")

def heartbeat():
    """–§–æ–Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ä ‚Äì —Ç–æ—á–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å, —á—Ç–æ–±—ã Render –Ω–µ —É–±–∏–≤–∞–ª –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä."""
    def run():
        while True:
            time.sleep(5)
            print(".", end="", flush=True)
    threading.Thread(target=run, daemon=True).start()

heartbeat()          # –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É

class TimeoutError(Exception):
    pass

def _handle_timeout(signum, frame):
    raise TimeoutError

def train_one(symbol: str, lookback: int = 60, max_sec: int = 30) -> bool:
    """–û–±—É—á–∞–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É, –Ω–æ –Ω–µ –¥–æ–ª—å—à–µ max_sec (30 —Å)."""
    try:
        print(f"\nüß† –û–±—É—á–∞–µ–º {symbol} (–ª–∏–º–∏—Ç {max_sec} —Å)...")
        df = get_bars(symbol, "1h", 300)
        if df is None or len(df) < 200:
            print(f"\n‚ö†Ô∏è  insufficient data for {symbol}")
            return False
        df = calculate_strategy_signals(df, 60)

        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ¬´–±—É–¥–∏–ª—å–Ω–∏–∫¬ª
        old_handler = signal.signal(signal.SIGALRM, _handle_timeout)
        signal.alarm(max_sec)

        try:
            model = LSTMPredictor(lookback=lookback)
            model.train(df)                       # –µ—Å–ª–∏ –∑–∞–Ω–∏–º–∞–µ—Ç > max_sec ‚Äì –≤—ã–ª–µ—Ç–∏—Ç
        finally:
            signal.alarm(0)                       # —Å–Ω–∏–º–∞–µ–º –±—É–¥–∏–ª—å–Ω–∏–∫
            signal.signal(signal.SIGALRM, old_handler)

        with open(model_path(symbol), "wb") as fh:
            pickle.dump({"scaler": model.scaler, "model": model.model}, fh)
        print(f"\n‚úÖ LSTM –æ–±—É—á–∏–ª–∞—Å—å –¥–ª—è {symbol}")
        return True
    except TimeoutError:
        print(f"\n‚è∞ –¢–∞–π–º–∞—É—Ç {max_sec} —Å –¥–ª—è {symbol} ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return False
    except Exception as e:
        print(f"\n‚ùå train error for {symbol}: {e}")
        return False

def load_model(symbol: str, lookback: int = 60):
    path = model_path(symbol)
    if not os.path.exists(path):
        return None
    try:
        with open(path, "rb") as fh:
            bundle = pickle.load(fh)
        m = LSTMPredictor(lookback=lookback)
        m.scaler = bundle["scaler"]
        m.model   = bundle["model"]
        m.is_trained = True
        return m
    except Exception as e:
        print(f"\n‚ö†Ô∏è load model error for {symbol}: {e}")
        return None

def initial_train_all(symbols: list[str]) -> None:
    """–ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º."""
    print("üß† –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–ª–∏–º–∏—Ç 30 —Å –Ω–∞ –ø–∞—Ä—É)...")
    ok = 0
    for s in symbols:
        if train_one(s, max_sec=30):
            ok += 1
    print(f"\nüß† –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω: {ok}/{len(symbols)} –ø–∞—Ä –æ–±—É—á–µ–Ω—ã.")
    if ok == 0:
        raise RuntimeError("–ù–∏ –æ–¥–Ω–∞ –ø–∞—Ä–∞ –Ω–µ –æ–±—É—á–∏–ª–∞—Å—å ‚Äì –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

def sequential_trainer(symbols: list[str], interval: int = 600):
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –¥–æ–æ–±—É—á–µ–Ω–∏–µ ‚Äì –æ–¥–Ω–∞ –ø–∞—Ä–∞ –∑–∞ –¥—Ä—É–≥–∏–º (—Ç–∞–π–º–∞—É—Ç 30 —Å)."""
    idx = 0
    while True:
        sym = symbols[idx % len(symbols)]
        train_one(sym, max_sec=30)
        idx += 1
        time.sleep(interval)
