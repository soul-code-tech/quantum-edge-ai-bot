# trainer.py
import os
import time
import pickle
import threading
from data_fetcher import get_bars
from lstm_model import LSTMPredictor
from strategy import calculate_strategy_signals
import ccxt

MODEL_DIR = "/tmp/lstm_weights"
os.makedirs(MODEL_DIR, exist_ok=True)

def model_path(symbol: str) -> str:
    return os.path.join(MODEL_DIR, symbol.replace("-", "") + ".pkl")

def market_exists(symbol: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä—ã–Ω–æ–∫ –Ω–∞ BingX."""
    try:
        exchange = ccxt.bingx({'options': {'defaultType': 'swap'}})
        symbol_api = symbol.replace('-', '/')
        exchange.load_markets()
        return symbol_api in exchange.markets
    except Exception:
        return False

def train_one(symbol: str, lookback: int = 60, epochs: int = 5) -> bool:
    """–û–±—É—á–∞–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É: ‚â§ 25 —Å, heartbeat, –±–µ–∑ signal-alarm."""
    try:
        if not market_exists(symbol):
            print(f"\n‚ùå {symbol}: —Ä—ã–Ω–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ BingX ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return False

        print(f"\nüß† –û–±—É—á–∞–µ–º {symbol} (epochs={epochs})...")

        # —Ñ–æ–Ω–æ–≤—ã–π heartbeat ‚Äì —Ç–æ—á–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å
        stop_heartbeat = threading.Event()
        def tick():
            while not stop_heartbeat.is_set():
                time.sleep(5)
                print(".", end="", flush=True)
        threading.Thread(target=tick, daemon=True).start()

        # –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å—á–∏—Ç–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df = get_bars(symbol, "1h", 300)
        if df is None or len(df) < 200:
            print(f"\n‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return False
        df = calculate_strategy_signals(df, 60)

        # –æ–±—É—á–∞–µ–º (5 —ç–ø–æ—Ö ‚âà 15-20 —Å –Ω–∞ CPU)
        model = LSTMPredictor(lookback=lookback)
        model.train(df, epochs=epochs)          # –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∏–∂–µ

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å–∞
        with open(model_path(symbol), "wb") as fh:
            pickle.dump({"scaler": model.scaler, "model": model.model}, fh)
        print(f"\n‚úÖ LSTM –æ–±—É—á–∏–ª–∞—Å—å –¥–ª—è {symbol}")
        return True

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {symbol}: {e}")
        return False
    finally:
        stop_heartbeat.set()          # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º heartbeat

def load_model(symbol: str, lookback: int = 60):
    path = model_path(symbol)
    if not os.path.exists(path):
        return None
    try:
        with open(path, "rb") as fh:
            bundle = pickle.load(fh)
        m = LSTMPredictor(lookback=lookback)
        m.scaler = bundle["scaler"]
        m.model   = bundle["model"]
        m.is_trained = True
        return m
    except Exception as e:
        print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {symbol}: {e}")
        return None

def initial_train_all(symbols: list[str], epochs: int = 5) -> None:
    """–ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ."""
    print("üß† –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ...")
    ok = 0
    for s in symbols:
        if train_one(s, epochs=epochs):
            ok += 1
        time.sleep(2)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
    print(f"\nüß† –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω: {ok}/{len(symbols)} –ø–∞—Ä –æ–±—É—á–µ–Ω—ã.")

def sequential_trainer(symbols: list[str], interval: int = 600, epochs: int = 5):
    """–î–æ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (–±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤, —Å heartbeat)."""
    idx = 0
    while True:
        sym = symbols[idx % len(symbols)]
        train_one(sym, epochs=epochs)
        idx += 1
        time.sleep(interval)
