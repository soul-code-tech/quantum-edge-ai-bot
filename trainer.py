# trainer.py
import os
import time
import pickle
from data_fetcher import get_bars
from lstm_model import LSTMPredictor
from strategy import calculate_strategy_signals
import ccxt
from download_weights import download_weights   # ‚Üê –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

MODEL_DIR = "/tmp/lstm_weights"
os.makedirs(MODEL_DIR, exist_ok=True)

def model_path(symbol: str) -> str:
    return os.path.join(MODEL_DIR, symbol.replace("-", "") + ".pkl")

def market_exists(symbol: str) -> bool:
    try:
        exchange = ccxt.bingx({'options': {'defaultType': 'swap'}})
        symbol_api = symbol.replace('-', '/')
        exchange.load_markets()
        return symbol_api in exchange.markets
    except Exception:
        return False

def train_one(symbol: str, lookback: int = 60, epochs: int = 5) -> bool:
    """–û–±—É—á–∞–µ—Ç –æ–¥–Ω—É –ø–∞—Ä—É: ‚â§ 25 —Å, heartbeat —Ç–æ—á–∫–∞–º–∏ –í–ù–£–¢–†–ò fit."""
    try:
        if not market_exists(symbol):
            print(f"\n‚ùå {symbol}: —Ä—ã–Ω–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ BingX ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return False

        print(f"\nüß† –û–±—É—á–∞–µ–º {symbol} (epochs={epochs})...")

        df = get_bars(symbol, "1h", 300)
        if df is None or len(df) < 200:
            print(f"\n‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return False
        df = calculate_strategy_signals(df, 60)

        model = LSTMPredictor(lookback=lookback)
        model.train(df, epochs=epochs)          # –≤–Ω—É—Ç—Ä–∏ –µ—Å—Ç—å print-—ã ‚Üí —Ç–æ—á–∫–∏ –∏–¥—É—Ç

        with open(model_path(symbol), "wb") as fh:
            pickle.dump({"scaler": model.scaler, "model": model.model}, fh)
        print(f"\n‚úÖ LSTM –æ–±—É—á–∏–ª–∞—Å—å –¥–ª—è {symbol}")
        return True

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {symbol}: {e}")
        return False

def load_model(symbol: str, lookback: int = 60):
    path = model_path(symbol)
    if not os.path.exists(path):
        return None
    try:
        with open(path, "rb") as fh:
            bundle = pickle.load(fh)
        m = LSTMPredictor(lookback=lookback)
        m.scaler = bundle["scaler"]
        m.model   = bundle["model"]
        m.is_trained = True
        return m
    except Exception as e:
        print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {symbol}: {e}")
        return None

def initial_train_all(symbols, epochs=5):
    """–°–Ω–∞—á–∞–ª–∞ –∫–∞—á–∞–µ–º –≤–µ—Å–∞ –∏–∑ GitHub, –ø–æ—Ç–æ–º –¥–æ—É—á–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ."""
    download_weights()                            # ‚Üê –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    print("üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä—ã...")
    ok = 0
    for s in symbols:
        if os.path.exists(model_path(s)):
            print(f"‚úÖ {s} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞")
            ok += 1
        else:
            print(f"üß† –û–±—É—á–∞–µ–º {s}...")
            if train_one(s, epochs=epochs):
                ok += 1
        # –∂–∏–≤–æ–π –≤—ã–≤–æ–¥ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ (–±–µ–∑ –ø–æ—Ç–æ–∫–æ–≤)
        print(">", end="", flush=True)
        for _ in range(4):          # 4 √ó 0.5 —Å = 2 —Å
            time.sleep(0.5)
            print(">", end="", flush=True)
        print()
    print(f"\nüß† –ü–µ—Ä–≤–∏—á–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω: {ok}/{len(symbols)} –ø–∞—Ä –æ–±—É—á–µ–Ω—ã.")

def sequential_trainer(symbols, interval=600, epochs=5):
    """–î–æ–æ–±—É—á–µ–Ω–∏–µ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç (–∂–∏–≤–æ–π –≤—ã–≤–æ–¥ –≤–Ω—É—Ç—Ä–∏)."""
    idx = 0
    while True:
        sym = symbols[idx % len(symbols)]
        train_one(sym, epochs=epochs)
        idx += 1
        # ¬´–∂–∏–≤–∞—è¬ª –∑–∞–¥–µ—Ä–∂–∫–∞ 10 –º–∏–Ω (–∫–∞–∂–¥—ã–µ 30 —Å –≤—ã–≤–æ–¥–∏–º ¬´.¬ª)
        for _ in range(20):        # 20 √ó 30 —Å = 600 —Å
            time.sleep(30)
            print(".", end="", flush=True)
        print()                    # –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
