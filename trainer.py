# trainer.py
import os
import time
import pickle
import subprocess
import logging
from datetime import timedelta
from data_fetcher import get_bars, get_funding_rate
from strategy import calculate_strategy_signals
from lstm_model import EnsemblePredictor
import ccxt

logger = logging.getLogger("bot")

WEIGHTS_DIR = os.path.join(os.path.dirname(__file__), "weights")
os.makedirs(WEIGHTS_DIR, exist_ok=True)
REPO_ROOT = os.path.dirname(os.path.abspath(__file__))
REPO_URL = "github.com/soul-code-tech/quantum-edge-ai-bot.git"

def model_path(symbol: str) -> str:
    return os.path.join(WEIGHTS_DIR, symbol.replace("-", "") + ".pkl")

def market_exists(symbol: str) -> bool:
    try:
        exchange = ccxt.bingx({"options": {"defaultType": "swap"}})
        exchange.load_markets()
        return symbol.replace("-", "") in exchange.markets
    except Exception as e:
        logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–∫–∞ {symbol}: {e}")
        return False

def is_model_fresh(symbol: str, max_age_hours: int = 24) -> bool:
    path = model_path(symbol)
    if not os.path.exists(path):
        return False
    age_hours = (time.time() - os.path.getmtime(path)) / 3600
    return age_hours < max_age_hours

def train_one(symbol: str, lookback: int = 60, epochs: int = 5) -> bool:
    if is_model_fresh(symbol):
        logger.info(f"‚è© {symbol} —Å–≤–µ–∂–∞—è ‚Äì –ø—Ä–æ–ø—É—Å–∫.")
        return True
    try:
        if not market_exists(symbol):
            logger.warning(f"{symbol} –Ω–µ—Ç –Ω–∞ BingX ‚Äì –ø—Ä–æ–ø—É—Å–∫.")
            return False

        logger.info(f"üß† Ensemble-–æ–±—É—á–µ–Ω–∏–µ {symbol} ({epochs} —ç–ø–æ—Ö)")
        df = get_bars(symbol, "1h", 400)          # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 400 –±–∞—Ä–æ–≤ ‚âà 16 –¥–Ω–µ–π
        if df is None or len(df) < 300:
            logger.warning(f"{symbol}: –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ‚Äì –ø—Ä–æ–ø—É—Å–∫.")
            return False

        df = calculate_strategy_signals(df, symbol, 60)   # –ø–µ—Ä–µ–¥–∞—ë–º symbol ‚Üí funding —Ñ–∏–ª—å—Ç—Ä

        # ========== Ensemble (2 LSTM + logistic) ==========
        ensemble = EnsemblePredictor(lookbacks=(60, 90))
        ensemble.train(df, epochs=epochs, bars_back=400)   # walk-forward 7 –¥–Ω–µ–π

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç ensemble
        with open(model_path(symbol), "wb") as f:
            pickle.dump({"ensemble": ensemble}, f)

        logger.info(f"‚úÖ Ensemble {symbol} –æ–±—É—á—ë–Ω.")
        save_weights_to_github(symbol)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ ensemble {symbol}: {e}")
        return False

def save_weights_to_github(symbol: str):
    try:
        os.chdir(REPO_ROOT)
        token = os.environ.get("GH_TOKEN")
        if not token:
            logger.warning("GH_TOKEN –Ω–µ—Ç ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—É—à.")
            return
        subprocess.run(["git", "config", "user.email", "bot@quantum-edge.ai"], check=True)
        subprocess.run(["git", "config", "user.name", "QuantumEdge-Bot"], check=True)
        subprocess.run(["git", "fetch", "origin", "weights"], check=False)
        subprocess.run(["git", "checkout", "-B", "weights"], check=True)
        subprocess.run(["git", "reset", "--hard", "origin/weights"], check=False)
        subprocess.run(["git", "add", "weights/"], check=True)
        subprocess.run(["git", "commit", "-m", f"update {symbol} weights"], check=True)
        subprocess.run(["git", "push", "origin", "weights"], check=True)   # ‚Üê –±–µ–∑ --force
        logger.info(f"‚úÖ –í–µ—Å–∞ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É—à–∞ {symbol}: {e}")

def load_model(symbol: str, lookback: int = 60):
    path = model_path(symbol)
    if not os.path.exists(path):
        return None
    try:
        with open(path, "rb") as f:
            bundle = pickle.load(f)
        return bundle["ensemble"]          # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç EnsemblePredictor
    except Exception as e:
        logger.error(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {symbol}: {e}")
        return None

def initial_train_all(symbols, epochs=5):
    logger.info(f"–ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ {len(symbols)} –ø–∞—Ä...")
    ok = 0
    for s in symbols:
        if train_one(s, epochs=epochs):
            ok += 1
        time.sleep(1)
    logger.info(f"–ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {ok}/{len(symbols)}.")

def sequential_trainer(symbols, interval=3600 * 24, epochs=2):
    """–ö–∞–∂–¥—ã–µ 24 —á –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–º—É > 24 —á ‚Üí –ø–µ—Ä–µ–æ–±—É—á–∞–µ–º."""
    idx = 0
    while True:
        sym = symbols[idx % len(symbols)]
        if not is_model_fresh(sym):
            train_one(sym, epochs=epochs)
        idx += 1
        time.sleep(interval)
