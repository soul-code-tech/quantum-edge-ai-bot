#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Quantum Edge AI Bot
"""

import os
import sys
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π...")
    
    try:
        import ccxt
        print("‚úÖ ccxt –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ccxt: {e}")
        return False
    
    try:
        import pandas as pd
        print("‚úÖ pandas –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pandas: {e}")
        return False
    
    try:
        import numpy as np
        print("‚úÖ numpy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ numpy: {e}")
        return False
    
    try:
        import tensorflow as tf
        print(f"‚úÖ tensorflow –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä—Å–∏—è: {tf.__version__})")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {tf.config.list_physical_devices()}")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ tensorflow: {e}")
        return False
    
    try:
        from ta.momentum import RSIIndicator
        from ta.volatility import AverageTrueRange
        from ta.trend import SMAIndicator
        print("‚úÖ ta (technical analysis) –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ta: {e}")
        return False
    
    try:
        from flask import Flask
        print("‚úÖ flask –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ flask: {e}")
        return False
    
    return True

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    api_key = os.getenv('BINGX_API_KEY')
    secret_key = os.getenv('BINGX_SECRET_KEY')
    
    if api_key:
        print("‚úÖ BINGX_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå BINGX_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    if secret_key:
        print("‚úÖ BINGX_SECRET_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå BINGX_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    return True

def test_modules():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π...")
    
    try:
        from data_fetcher import get_bars
        print("‚úÖ data_fetcher –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ data_fetcher: {e}")
        return False
    
    try:
        from strategy import calculate_strategy_signals
        print("‚úÖ strategy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ strategy: {e}")
        return False
    
    try:
        from trader import BingXTrader
        print("‚úÖ trader –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ trader: {e}")
        return False
    
    try:
        from lstm_model import LSTMPredictor
        print("‚úÖ lstm_model –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ lstm_model: {e}")
        return False
    
    return True

def test_data_fetching():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏...")
    
    try:
        from data_fetcher import get_bars
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BTC-USDT
        df = get_bars('BTC-USDT', '1h', 100)
        
        if df is not None and len(df) > 0:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –†–∞–∑–º–µ—Ä: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
            print(f"üìà –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df['close'].iloc[-1]:.2f}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_strategy():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    try:
        from data_fetcher import get_bars
        from strategy import calculate_strategy_signals
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = get_bars('BTC-USDT', '1h', 200)
        
        if df is None:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            return False
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        df_with_signals = calculate_strategy_signals(df, 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        buy_signals = df_with_signals['buy_signal'].sum()
        sell_signals = df_with_signals['sell_signal'].sum()
        
        print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä Buy —Å–∏–≥–Ω–∞–ª–æ–≤: {buy_signals}")
        print(f)        print(f"üìä Sell —Å–∏–≥–Ω–∞–ª–æ–≤: {sell_signals}")
        print(f"üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {['rsi', 'sma20', 'sma50', 'atr', 'trend_score', 'long_score', 'short_score']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        return False

def test_lstm_model():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LSTM –º–æ–¥–µ–ª–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LSTM –º–æ–¥–µ–ª–∏...")
    
    try:
        from data_fetcher import get_bars
        from strategy import calculate_strategy_signals
        from lstm_model import LSTMPredictor
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
        model = LSTMPredictor(lookback=60, model_dir='test_weights')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = get_bars('BTC-USDT', '1h', 200)
        df = calculate_strategy_signals(df, 60)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = model.predict_next(df)
        
        print(f"‚úÖ LSTM –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"üß† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction:.2%}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ LSTM –º–æ–¥–µ–ª–∏: {e}")
        return False

def test_trader():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–π–¥–µ—Ä–∞...")
    
    try:
        from trader import BingXTrader
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
        trader = BingXTrader(symbol='BTC-USDT', use_demo=True, leverage=10)
        
        print("‚úÖ –¢—Ä–µ–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –°–∏–º–≤–æ–ª: {trader.symbol}")
        print(f"üîß –ü–ª–µ—á–æ: {trader.leverage}x")
        print(f"üéØ –î–µ–º–æ-—Ä–µ–∂–∏–º: {trader.use_demo}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞: {e}")
        return False

def test_weights_directory():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ weights"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ weights...")
    
    weights_dir = 'weights'
    
    if os.path.exists(weights_dir):
        print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è weights —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        try:
            os.makedirs(weights_dir)
            print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è weights —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ weights: {e}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
    test_file = os.path.join(weights_dir, 'test.txt')
    try:
        with open(test_file, 'w') as f:
            f.write('test')
        os.remove(test_file)
        print("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ weights –µ—Å—Ç—å")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Quantum Edge AI Bot - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 50)
    
    all_tests_passed = True
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment),
        ("–ú–æ–¥—É–ª–∏", test_modules),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è weights", test_weights_directory),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", test_data_fetching),
        ("–°—Ç—Ä–∞—Ç–µ–≥–∏—è", test_strategy),
        ("LSTM –º–æ–¥–µ–ª—å", test_lstm_model),
        ("–¢—Ä–µ–π–¥–µ—Ä", test_trader),
    ]
    
    for test_name, test_func in tests:
        if not test_func():
            all_tests_passed = False
            print(f"\n‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω!")
            break
        else:
            print(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
    
    print("\n" + "=" * 50)
    
    if all_tests_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("python main.py")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        sys.exit(1)

if __name__ == "__main__":
    main()
