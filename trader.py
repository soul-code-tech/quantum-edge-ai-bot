# trader.py ‚Äî Quantum Edge AI Bot: BingXTrader (—Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è)
import ccxt
import os
import time
import hashlib
import hmac
import requests
from dotenv import load_dotenv

load_dotenv()

class BingXTrader:
    def __init__(self, symbol='BTC-USDT', use_demo=False, leverage=10):
        self.symbol = symbol
        self.use_demo = use_demo
        self.leverage = leverage
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
        self.exchange = ccxt.bingx({
            'apiKey': os.getenv('BINGX_API_KEY'),
            'secret': os.getenv('BINGX_SECRET_KEY'),
            'options': {'defaultType': 'swap'},
            'enableRateLimit': True,
        })
        
        if use_demo:
            self.exchange.set_sandbox_mode(True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        self._set_leverage(leverage)

        # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
        self.position = None
        self.trailing_stop_price = None
        self.trailing_distance_percent = 1.0  # 1% –æ—Ç —Ü–µ–Ω—ã

    def _set_leverage(self, leverage):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–µ—á–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π POST-–∑–∞–ø—Ä–æ—Å –∫ BingX"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            timestamp = int(time.time() * 1000)
            symbol_for_api = self.symbol.replace('-', '')  # BTCUSDT
            api_key = os.getenv('BINGX_API_KEY')
            secret_key = os.getenv('BINGX_SECRET_KEY')

            params = {
                'symbol': symbol_for_api,
                'leverage': str(leverage),
                'timestamp': timestamp
            }

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á—É –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É
            query_string = '&'.join([f"{k}={v}" for k, v in sorted(params.items())])
            
            # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å—å HMAC SHA256
            signature = hmac.new(
                secret_key.encode(),
                query_string.encode(),
                hashlib.sha256
            ).hexdigest()

            headers = {
                'X-BX-APIKEY': api_key,
                'Content-Type': 'application/json'
            }

            url = 'https://open-api.bingx.com/openApi/swap/v2/trade/setLeverage'

            payload = {**params, 'signature': signature}

            response = requests.post(url, json=payload, headers=headers)
            result = response.json()

            if result.get('code') == 0:
                print(f"‚úÖ {self.symbol}: –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {leverage}x")
            else:
                msg = result.get('msg', 'unknown error')
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞: {msg}")

        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {self.symbol}: {e}")

    def place_order(self, side, amount, stop_loss_percent=1.5, take_profit_percent=3.0):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é + —Å—Ç–æ–ø-–ª–æ—Å—Å (stop_market) + —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (limit)
        """
        try:
            # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—ã
            markets = self.exchange.fetch_markets()
            for m in markets:
                if m['symbol'] == self.symbol:
                    status = m['info'].get('status', 'TRADING')
                    if status != 'TRADING':
                        print(f"üö´ {self.symbol} ‚Äî —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        return None

            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {side} {amount}")
            market_order = self.exchange.create_order(
                symbol=self.symbol,
                type='market',
                side=side,
                amount=amount
            )
            order_id = market_order.get('id', 'N/A')
            print(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")

            # üíµ –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            entry_price = market_order.get('price', None)
            if not entry_price:
                ticker = self.exchange.fetch_ticker(self.symbol)
                entry_price = ticker['last']

            # üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP/SL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Ü–µ–Ω—ã
            if side == 'buy':
                stop_loss_price = entry_price * (1 - stop_loss_percent / 100)
                take_profit_price = entry 
