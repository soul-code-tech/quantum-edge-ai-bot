# trader.py ‚Äî –§–ò–ù–ê–õ–¨–ù–ê–Ø, –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
import ccxt
import os
import time
from dotenv import load_dotenv

load_dotenv()

class BingXTrader:
    def __init__(self, symbol='BTC-USDT', use_demo=False):
        self.symbol = symbol
        self.use_demo = use_demo
        self.exchange = ccxt.bingx({
            'apiKey': os.getenv('BINGX_API_KEY'),
            'secret': os.getenv('BINGX_SECRET_KEY'),
            'options': {'defaultType': 'swap'},
            'enableRateLimit': True,
        })
        if use_demo:
            self.exchange.set_sandbox_mode(True)

    def place_order(self, side, amount, stop_loss_price, take_profit_price):
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {side} {amount}")
            market_order = self.exchange.create_order(
                symbol=self.symbol,
                type='market',
                side=side,
                amount=amount
            )
            order_id = market_order.get('id', 'N/A')
            print(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")

            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è...")
            max_attempts = 10
            for attempt in range(max_attempts):
                time.sleep(1)
                positions = self.exchange.fetch_positions([self.symbol])
                open_position = None
                for pos in positions:
                    if float(pos['contracts']) > 0:
                        open_position = pos
                        break

                if open_position:
                    print(f"üéØ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã–ª–∞—Å—å! –û–±—ä—ë–º: {open_position['contracts']} BTC")
                    break
                else:
                    print(f"‚è≥ –ü–æ–∑–∏—Ü–∏—è –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å... ({attempt + 1}/{max_attempts})")

            if not open_position:
                print("‚ùå –û–®–ò–ë–ö–ê: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –∑–∞ 10 —Å–µ–∫—É–Ω–¥. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è.")
                return None

            print(f"‚õî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (stop_market): {stop_loss_price}")
            self.exchange.create_order(
                symbol=self.symbol,
                type='stop_market',  # ‚úÖ –í–ê–ñ–ù–û: –∏–º–µ–Ω–Ω–æ —Ç–∞–∫!
                side='sell' if side == 'buy' else 'buy',
                amount=amount,
                params={'stopPrice': stop_loss_price}
            )

            print(f"üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (limit): {take_profit_price}")
            self.exchange.create_order(
                symbol=self.symbol,
                type='limit',
                side='sell' if side == 'buy' else 'buy',
                amount=amount,
                price=take_profit_price
            )

            print("‚úÖ –£–°–ü–ï–•! –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
            return market_order

        except Exception as e:
            error_str = str(e)
            if "position not exist" in error_str:
                print("‚ùå –û–®–ò–ë–ö–ê: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω.")
            elif "Invalid order type" in error_str:
                print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å 'stop_market'.")
            else:
                print(f"‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ API: {type(e).__name__}: {error_str}")
            return None
