# trader.py ‚Äî –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø ‚Äî –ò–°–ü–†–ê–í–õ–ï–ù–û –ü–õ–ï–ß–û + USER-AGENT + –°–ò–ú–í–û–õ
import ccxt
import os
from dotenv import load_dotenv

load_dotenv()

class BingXTrader:
    def __init__(self, symbol='BTC-USDT', use_demo=False, leverage=10):
        self.symbol = symbol
        self.use_demo = use_demo
        self.leverage = leverage
        
        # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: User-Agent –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        self.exchange = ccxt.bingx({
            'apiKey': os.getenv('BINGX_API_KEY'),
            'secret': os.getenv('BINGX_SECRET_KEY'),
            'options': {'defaultType': 'swap'},
            'enableRateLimit': True,
            'headers': {'User-Agent': 'QuantumEdgeAI-Bot/1.0'}
        })
        
        if use_demo:
            self.exchange.set_sandbox_mode(True)
        
        self.position = None
        self.trailing_stop_price = None
        self.trailing_distance_percent = 1.0

    def _set_leverage(self, leverage):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–µ—á–æ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API v2 (—Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥)"""
        try:
            symbol_for_api = self.symbol.replace('-', '')  # BTCUSDT
            response = self.exchange.private_post_swap_v2_trade_leverage({
                "symbol": symbol_for_api,
                "leverage": str(leverage),
                "side": "BOTH"  # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è BingX
            })
            
            if response.get('code') == 0:
                print(f"‚úÖ {self.symbol}: –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {leverage}x")
            else:
                msg = response.get('msg', 'unknown error')
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞: {msg}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {self.symbol}: {e}")

    def place_order(self, side, amount, stop_loss_percent=1.5, take_profit_percent=3.0):
        try:
            # ‚úÖ –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–õ–ï–ß–û –¢–û–õ–¨–ö–û –ü–†–ò –ü–ï–†–í–û–ô –°–î–ï–õ–ö–ï
            self._set_leverage(self.leverage)

            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ü–ê–†–´
            markets = self.exchange.fetch_markets()
            for m in markets:
                if m['symbol'] == self.symbol:
                    if m['info'].get('status') != 'TRADING':
                        print(f"üö´ {self.symbol} ‚Äî —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        return None

            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {side} {amount} {self.symbol}")
            symbol_for_api = self.symbol.replace('-', '/')  # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!
            market_order = self.exchange.create_order(
                symbol=symbol_for_api,
                type='market',
                side=side,
                amount=amount
            )
            order_id = market_order.get('id', 'N/A')
            print(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")
            
            entry_price = market_order.get('price', None)
            if not entry_price:
                ticker = self.exchange.fetch_ticker(symbol_for_api)
                entry_price = ticker['last']
            
            if side == 'buy':
                stop_loss_price = entry_price * (1 - stop_loss_percent / 100)
                take_profit_price = entry_price * (1 + take_profit_percent / 100)
                self.trailing_stop_price = entry_price * (1 - self.trailing_distance_percent / 100)
            else:
                stop_loss_price = entry_price * (1 + stop_loss_percent / 100)
                take_profit_price = entry_price * (1 - take_profit_percent / 100)
                self.trailing_stop_price = entry_price * (1 + self.trailing_distance_percent / 100)
            
            print(f"üìä –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}")
            
            # ‚úÖ –°–¢–û–ü-–õ–ê–°–° ‚Äî stop_market
            print(f"‚õî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (stop_market): {stop_loss_price:.2f} ({stop_loss_percent}%)")
            self.exchange.create_order(
                symbol=symbol_for_api,
                type='stop_market',
                side='sell' if side == 'buy' else 'buy',
                amount=amount,
                params={'stopPrice': stop_loss_price, 'reduceOnly': True}
            )
            
            # ‚úÖ –¢–ï–ô–ö-–ü–†–û–§–ò–¢ ‚Äî limit
            print(f"üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (limit): {take_profit_price:.2f} ({take_profit_percent}%)")
            self.exchange.create_order(
                symbol=symbol_for_api,
                type='limit',
                side='sell' if side == 'buy' else 'buy',
                amount=amount,
                price=take_profit_price,
                params={'reduceOnly': True}
            )
            
            self.position = {
                'side': side,
                'entry_price': entry_price,
                'amount': amount,
                'last_trailing_price': entry_price
            }
            
            print(f"‚úÖ –£–°–ü–ï–•! –û—Ä–¥–µ—Ä {side} –Ω–∞ {self.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            return market_order
            
        except Exception as e:
            error_str = str(e)
            if "position not exist" in error_str:
                print(f"‚ùå {self.symbol}: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è.")
            elif "Invalid order quantity" in error_str:
                print(f"‚ùå {self.symbol}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å –ª–∏–º–∏—Ç—ã.")
            elif "101415" in error_str:
                print(f"üö´ {self.symbol}: –¢–æ—Ä–≥–æ–≤–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ñ–¥—ë–º...")
            elif "101212" in error_str:
                print(f"‚ö†Ô∏è {self.symbol}: –ï—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ ‚Äî –æ—Ç–º–µ–Ω–∏ –∏—Ö –≤—Ä—É—á–Ω—É—é.")
            elif "Invalid order type" in error_str:
                print(f"‚ùå {self.symbol}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π 'stop_market' –∏ 'limit'.")
            elif "reduceOnly" in error_str:
                print(f"‚ö†Ô∏è {self.symbol}: reduceOnly —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω.")
            else:
                print(f"‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ API {self.symbol}: {type(e).__name__}: {error_str}")
            return None

    def update_trailing_stop(self):
        if not self.position:
            return
        try:
            symbol_for_api = self.symbol.replace('-', '/')  # ‚úÖ –í–ê–ñ–ù–û!
            ticker = self.exchange.fetch_ticker(symbol_for_api)
            current_price = ticker['last']
            side = self.position['side']
            new_trailing_price = self.trailing_stop_price
            
            if side == 'buy':
                if current_price > self.position['last_trailing_price']:
                    new_trailing_price = current_price * (1 - self.trailing_distance_percent / 100)
                    if new_trailing_price > self.trailing_stop_price:
                        self.trailing_stop_price = new_trailing_price
                        print(f"üìà {self.symbol}: –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ø–æ–¥–Ω—è—Ç: {self.trailing_stop_price:.2f}")
                        self._cancel_all_stops()
                        self.exchange.create_order(
                            symbol=symbol_for_api,
                            type='stop_market',
                            side='sell',
                            amount=self.position['amount'],
                            params={'stopPrice': self.trailing_stop_price, 'reduceOnly': True}
                        )
                        self.position['last_trailing_price'] = current_price
            elif side == 'sell':
                if current_price < self.position['last_trailing_price']:
                    new_trailing_price = current_price * (1 + self.trailing_distance_percent / 100)
                    if new_trailing_price < self.trailing_stop_price:
                        self.trailing_stop_price = new_trailing_price
                        print(f"üìâ {self.symbol}: –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –æ–ø—É—â–µ–Ω: {self.trailing_stop_price:.2f}")
                        self._cancel_all_stops()
                        self.exchange.create_order(
                            symbol=symbol_for_api,
                            type='stop_market',
                            side='buy',
                            amount=self.position['amount'],
                            params={'stopPrice': self.trailing_stop_price, 'reduceOnly': True}
                        )
                        self.position['last_trailing_price'] = current_price
        except Exception as e:
            print(f"‚ö†Ô∏è {self.symbol}: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞: {e}")

    def _cancel_all_stops(self):
        try:
            symbol_for_api = self.symbol.replace('-', '/')  # ‚úÖ –í–ê–ñ–ù–û!
            orders = self.exchange.fetch_open_orders(symbol_for_api)
            for order in orders:
                if order['type'] == 'stop_market' and order.get('reduceOnly'):
                    self.exchange.cancel_order(order['id'], symbol_for_api)
                    print(f"üóëÔ∏è {self.symbol}: –û—Ç–º–µ–Ω—ë–Ω —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä ID: {order['id']}")
        except Exception as e:
            print(f"‚ö†Ô∏è {self.symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–∞: {e}")
