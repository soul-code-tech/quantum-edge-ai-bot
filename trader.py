# trader.py ‚Äî Quantum Edge AI Bot: BingXTrader (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø)
import ccxt
import os
import time
import hashlib
import hmac
import requests
from dotenv import load_dotenv

load_dotenv()

class BingXTrader:
    def __init__(self, symbol='BTC-USDT', use_demo=False, leverage=10):
        self.symbol = symbol
        self.use_demo = use_demo
        self.leverage = leverage
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
        self.exchange = ccxt.bingx({
            'apiKey': os.getenv('BINGX_API_KEY'),
            'secret': os.getenv('BINGX_SECRET_KEY'),
            'options': {'defaultType': 'swap'},
            'enableRateLimit': True,
        })
        
        if use_demo:
            self.exchange.set_sandbox_mode(True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        # self._set_leverage(leverage)  # ‚Üê –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û ‚Äî –Ω–µ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ –ø–ª–µ—á–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ

        # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
        self.position = None
        self.trailing_stop_price = None
        self.trailing_distance_percent = 1.0  # 1% –æ—Ç —Ü–µ–Ω—ã

    def _set_leverage(self, leverage):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–µ—á–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π POST-–∑–∞–ø—Ä–æ—Å –∫ BingX (swap) ‚Äî –¥–ª—è –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        try:
            timestamp = int(time.time() * 1000)
            symbol_for_api = self.symbol.replace('-', '')  # BTCUSDT
            api_key = os.getenv('BINGX_API_KEY')
            secret_key = os.getenv('BINGX_SECRET_KEY')

            # ‚úÖ –í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –ü–û–î–ü–ò–°–ò ‚Äî –ö–ê–ö –°–¢–†–û–ö–ò
            query_string = f"symbol={symbol_for_api}&leverage={str(leverage)}&side=BOTH&timestamp={timestamp}"

            # ‚úÖ –ì–ï–ù–ï–†–ò–†–£–ï–ú –ü–û–î–ü–ò–°–¨
            signature = hmac.new(
                secret_key.encode(),
                query_string.encode(),
                hashlib.sha256
            ).hexdigest()

            # ‚úÖ –¢–ï–õ–û –ó–ê–ü–†–û–°–ê ‚Äî –¢–û–ß–ù–û –¢–ê–ö–ò–ï –ñ–ï –ü–ê–†–ê–ú–ï–¢–†–´, –ö–ê–ö –í query_string
            payload = {
                "symbol": symbol_for_api,
                "leverage": str(leverage),   # ‚Üê –°–¢–†–û–ö–ê!
                "side": "BOTH",              # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!
                "timestamp": timestamp,
                "signature": signature
            }

            headers = {
                'X-BX-APIKEY': api_key,
                'Content-Type': 'application/json'
            }

            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô URL ‚Äî –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
            url = 'https://open-api.bingx.com/openApi/swap/v2/trade/leverage'

            response = requests.post(url, json=payload, headers=headers)
            result = response.json()

            if result.get('code') == 0:
                print(f"‚úÖ {self.symbol}: –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {leverage}x")
            else:
                msg = result.get('msg', 'unknown error')
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞: {msg}")

        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {self.symbol}: {e}")

    def place_order(self, side, amount, stop_loss_percent=1.5, take_profit_percent=3.0):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä + —Å—Ç–æ–ø-–ª–æ—Å—Å + —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—ã
            markets = self.exchange.fetch_markets()
            for m in markets:
                if m['symbol'] == self.symbol:
                    if m['info'].get('status') != 'TRADING':
                        print(f"üö´ {self.symbol} ‚Äî —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        return None

            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {side} {amount}")
            market_order = self.exchange.create_order(
                symbol=self.symbol,
                type='market',
                side=side,
                amount=amount
            )
            order_id = market_order.get('id', 'N/A')
            print(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            def fetch_ticker_safe():
                return self.exchange.fetch_ticker(self.symbol)
            
            ticker = fetch_with_retry(fetch_ticker_safe)
            entry_price = ticker['last']

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP/SL
            if side == 'buy':
                stop_loss_price = entry_price * (1 - stop_loss_percent / 100)
                take_profit_price = entry_price * (1 + take_profit_percent / 100)
                self.trailing_stop_price = entry_price * (1 - self.trailing_distance_percent / 100)
            else:
                stop_loss_price = entry_price * (1 + stop_loss_percent / 100)
                take_profit_price = entry_price * (1 - take_profit_percent / 100)
                self.trailing_stop_price = entry_price * (1 + self.trailing_distance_percent / 100)

            print(f"üìä –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}")
            print(f"‚õî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (stop_market): {stop_loss_price:.2f} ({stop_loss_percent}%)")
            print(f"üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (limit): {take_profit_price:.2f} ({take_profit_percent}%)")

            # –°—Ç–æ–ø-–ª–æ—Å—Å
            self.exchange.create_order(
                symbol=self.symbol,
                type='stop_market',
                side='sell' if side == 'buy' else 'buy',
                amount=amount,
                params={'stopPrice': stop_loss_price, 'reduceOnly': True}
            )

            # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            self.exchange.create_order(
                symbol=self.symbol,
                type='limit',
                side='sell' if side == 'buy' else 'buy',
                amount=amount,
                price=take_profit_price,
                params={'reduceOnly': True}
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            self.position = {
                'side': side,
                'entry_price': entry_price,
                'amount': amount,
                'last_trailing_price': entry_price
            }

            print(f"‚úÖ –£–°–ü–ï–•! –û—Ä–¥–µ—Ä {side} –Ω–∞ {self.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            return market_order

        except Exception as e:
            error_str = str(e)
            if "position not exist" in error_str:
                print(f"‚ùå {self.symbol}: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è.")
            elif "Invalid order quantity" in error_str:
                print(f"‚ùå {self.symbol}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å –ª–∏–º–∏—Ç—ã.")
            elif "101415" in error_str:
                print(f"üö´ {self.symbol}: –¢–æ—Ä–≥–æ–≤–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ñ–¥—ë–º...")
            elif "101212" in error_str:
                print(f"‚ö†Ô∏è {self.symbol}: –ï—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ ‚Äî –æ—Ç–º–µ–Ω–∏ –∏—Ö –≤—Ä—É—á–Ω—É—é.")
            elif "Invalid order type" in error_str:
                print(f"‚ùå {self.symbol}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π 'stop_market' –∏ 'limit'.")
            elif "reduceOnly" in error_str:
                print(f"‚ö†Ô∏è {self.symbol}: reduceOnly —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω.")
            else:
                print(f"‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ API {self.symbol}: {type(e).__name__}: {error_str}")
            return None

    def update_trailing_stop(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–≤–∏–Ω—É–ª–∞—Å—å –≤ –≤—ã–≥–æ–¥–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É"""
        if not self.position:
            return

        def fetch_ticker_safe():
            return self.exchange.fetch_ticker(self.symbol)
        
        current_price = fetch_with_retry(fetch_ticker_safe)['last']
        side = self.position['side']
        new_trailing_price = None

        if side == 'buy':
            new_trailing_price = current_price * (1 - self.trailing_distance_percent / 100)
            if new_trailing_price > self.trailing_stop_price:
                self.trailing_stop_price = new_trailing_price
                print(f"üìà {self.symbol}: –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {self.trailing_stop_price:.2f} (–±—ã–ª {self.position['last_trailing_price']:.2f})")
        else:
            new_trailing_price = current_price * (1 + self.trailing_distance_percent / 100)
            if new_trailing_price < self.trailing_stop_price:
                self.trailing_stop_price = new_trailing_price
                print(f"üìâ {self.symbol}: –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {self.trailing_stop_price:.2f} (–±—ã–ª {self.position['last_trailing_price']:.2f})")

        self.position['last_trailing_price'] = current_price


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é fetch_with_retry –≤ —ç—Ç–æ—Ç –∂–µ —Ñ–∞–π–ª ‚Äî —á—Ç–æ–±—ã –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ data_fetcher
def fetch_with_retry(func, max_retries=3, delay=2, backoff=1.5):
    """
    –£–º–Ω—ã–π retry –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤ BingX ‚Äî —Å backoff –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
    """
    base_urls = [
        'https://open-api.bingx.com',
        'https://open-api.bingx.io'
    ]
    
    for attempt in range(max_retries):
        for base_url in base_urls:
            try:
                exchange = ccxt.bingx({
                    'options': {'defaultType': 'swap', 'baseUrl': base_url},
                    'enableRateLimit': True,
                })
                result = func(exchange)
                return result
            except Exception as e:
                if attempt == max_retries - 1 and base_url == base_urls[-1]:
                    raise Exception(f"‚ùå –í—Å–µ –¥–æ–º–µ–Ω—ã –∏ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: {e}")
                wait_time = delay * (backoff ** attempt) + random.uniform(0, 1)
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {base_url}: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time:.1f} —Å–µ–∫. (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                time.sleep(wait_time)
                break  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–æ–º–µ–Ω—É
