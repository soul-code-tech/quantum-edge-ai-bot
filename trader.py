import ccxt
import os
from dotenv import load_dotenv
import time

load_dotenv()

class BingXTrader:
    def __init__(self, symbol='BTC-USDT', use_demo=False, leverage=10):
        self.symbol = symbol
        self.use_demo = use_demo
        self.leverage = leverage
        self.exchange = ccxt.bingx({
            'apiKey': os.getenv('BINGX_API_KEY'),
            'secret': os.getenv('BINGX_SECRET_KEY'),
            'options': {'defaultType': 'swap'},
            'enableRateLimit': True,
        })
        if use_demo:
            self.exchange.set_sandbox_mode(True)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–µ—á–∞ —á–µ—Ä–µ–∑ API v3
        self._set_leverage_v3(leverage)
        
        self.position = None
        self.trailing_stop_price = None
        self.trailing_distance_percent = 1.0
        self.last_leverage_check = 0

    def _set_leverage_v3(self, leverage):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–µ—á–∞ —á–µ—Ä–µ–∑ API v3"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞
            symbol_for_api = self.symbol.replace('-', '')
            
            # –î–ª—è BingX –∏—Å–ø–æ–ª—å–∑—É–µ–º v3 API endpoint
            response = self.exchange.privatePostLinearSwapApiV3TradingSetLeverage({
                'symbol': symbol_for_api,
                'leverage': str(leverage),
                'side': 'BOTH'  # BOTH –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ –ø–ª–µ—á–∞
            })
            
            if response.get('code') == 0 or response.get('msg') == 'success':
                print(f"‚úÖ {self.symbol}: –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {leverage}x")
                self.last_leverage_check = time.time()
                return True
            else:
                msg = response.get('msg', 'unknown')
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞: {msg}")
                
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ position margin
                try:
                    self.exchange.set_leverage(leverage, self.symbol)
                    print(f"‚úÖ {self.symbol}: –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ set_leverage –Ω–∞ {leverage}x")
                    return True
                except Exception as e2:
                    print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e2}")
                    return False
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {self.symbol}: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –µ—â–µ –æ–¥–∏–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            try:
                self.exchange.set_leverage(leverage, self.symbol)
                print(f"‚úÖ {self.symbol}: –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞ {leverage}x")
                return True
            except Exception as e2:
                print(f"‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {e2}")
                return False

    def _verify_leverage(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–ª–µ—á–æ"""
        current_time = time.time()
        if current_time - self.last_leverage_check > 3600:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            try:
                symbol_for_api = self.symbol.replace('-', '')
                response = self.exchange.privateGetLinearSwapApiV3TradingGetLeverage({
                    'symbol': symbol_for_api
                })
                
                if response.get('code') == 0:
                    current_leverage = response.get('data', {}).get('leverage', 1)
                    if float(current_leverage) != self.leverage:
                        print(f"‚ö†Ô∏è {self.symbol}: –¢–µ–∫—É—â–µ–µ –ø–ª–µ—á–æ {current_leverage}x, —Ç—Ä–µ–±—É–µ—Ç—Å—è {self.leverage}x")
                        self._set_leverage_v3(self.leverage)
                    else:
                        print(f"‚úÖ {self.symbol}: –ü–ª–µ—á–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {current_leverage}x")
                
                self.last_leverage_check = current_time
                
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–µ—á–æ –¥–ª—è {self.symbol}: {e}")

    def place_order(self, side, amount, stop_loss_percent=1.5, take_profit_percent=3.0):
        """–†–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–ª–µ—á–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–µ—á–æ –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
            self._verify_leverage()
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {side} {amount} {self.symbol}")
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
            leveraged_amount = amount / self.leverage
            
            market_order = self.exchange.create_order(
                symbol=self.symbol,
                type='market',
                side=side,
                amount=leveraged_amount
            )
            
            order_id = market_order.get('id', 'N/A')
            print(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")

            entry_price = market_order.get('price', None)
            if not entry_price:
                ticker = self.exchange.fetch_ticker(self.symbol)
                entry_price = ticker['last']

            if side == 'buy':
                stop_loss_price = entry_price * (1 - stop_loss_percent / 100)
                take_profit_price = entry_price * (1 + take_profit_percent / 100)
                self.trailing_stop_price = entry_price * (1 - self.trailing_distance_percent / 100)
            else:
                stop_loss_price = entry_price * (1 + stop_loss_percent / 100)
                take_profit_price = entry_price * (1 - take_profit_percent / 100)
                self.trailing_stop_price = entry_price * (1 + self.trailing_distance_percent / 100)

            print(f"üìä –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}")
            print(f"‚õî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (stop_market): {stop_loss_price:.2f} ({stop_loss_percent}%)")
            print(f"üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (limit): {take_profit_price:.2f} ({take_profit_percent}%)")

            # –°—Ç–æ–ø-–ª–æ—Å—Å
            self.exchange.create_order(
                symbol=self.symbol,
                type='stop_market',
                side='sell' if side == 'buy' else 'buy',
                amount=leveraged_amount,
                params={'stopPrice': stop_loss_price, 'reduceOnly': True}
            )

            # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            self.exchange.create_order(
                symbol=self.symbol,
                type='limit',
                side='sell' if side == 'buy' else 'buy',
                amount=leveraged_amount,
                price=take_profit_price,
                params={'reduceOnly': True}
            )

            self.position = {
                'side': side,
                'entry_price': entry_price,
                'amount': leveraged_amount,
                'last_trailing_price': entry_price,
                'original_amount': amount  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            }

            print(f"‚úÖ –£–°–ü–ï–•! –û—Ä–¥–µ—Ä {side} –Ω–∞ {self.symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            return market_order

        except Exception as e:
            error_str = str(e)
            if "position not exist" in error_str:
                print(f"‚ùå {self.symbol}: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è.")
            elif "Invalid order quantity" in error_str:
                print(f"‚ùå {self.symbol}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å –ª–∏–º–∏—Ç—ã.")
            elif "101415" in error_str:
                print(f"üö´ {self.symbol}: –¢–æ—Ä–≥–æ–≤–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ñ–¥—ë–º...")
            elif "101212" in error_str:
                print(f"‚ö†Ô∏è {self.symbol}: –ï—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ ‚Äî –æ—Ç–º–µ–Ω–∏ –∏—Ö –≤—Ä—É—á–Ω—É—é.")
            elif "Invalid order type" in error_str:
                print(f"‚ùå {self.symbol}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π 'stop_market' –∏ 'limit'.")
            elif "reduceOnly" in error_str:
                print(f"‚ö†Ô∏è {self.symbol}: reduceOnly —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω.")
            elif "leverage" in error_str.lower():
                print(f"‚ö†Ô∏è {self.symbol}: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–µ—á–æ–º ‚Äî –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                self._set_leverage_v3(self.leverage)
            else:
                print(f"‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ API {self.symbol}: {type(e).__name__}: {error_str}")
            return None

    def update_trailing_stop(self):
        if not self.position:
            return
        try:
            ticker = self.exchange.fetch_ticker(self.symbol)
            current_price = ticker['last']
            side = self.position['side']
            new_trailing_price = self.trailing_stop_price

            if side == 'buy':
                if current_price > self.position['last_trailing_price']:
                    new_trailing_price = current_price * (1 - self.trailing_distance_percent / 100)
                    if new_trailing_price > self.trailing_stop_price:
                        self.trailing_stop_price = new_trailing_price
                        print(f"üìà {self.symbol}: –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ø–æ–¥–Ω—è—Ç: {self.trailing_stop_price:.2f}")
                        self._cancel_all_stops()
                        self.exchange.create_order(
                            symbol=self.symbol,
                            type='stop_market',
                            side='sell',
                            amount=self.position['amount'],
                            params={'stopPrice': self.trailing_stop_price, 'reduceOnly': True}
                        )
                        self.position['last_trailing_price'] = current_price

            elif side == 'sell':
                if current_price < self.position['last_trailing_price']:
                    new_trailing_price = current_price * (1 + self.trailing_distance_percent / 100)
                    if new_trailing_price < self.trailing_stop_price:
                        self.trailing_stop_price = new_trailing_price
                        print(f"üìâ {self.symbol}: –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –æ–ø—É—â–µ–Ω: {self.trailing_stop_price:.2f}")
                        self._cancel_all_stops()
                        self.exchange.create_order(
                            symbol=self.symbol,
                            type='stop_market',
                            side='buy',
                            amount=self.position['amount'],
                            params={'stopPrice': self.trailing_stop_price, 'reduceOnly': True}
                        )
                        self.position['last_trailing_price'] = current_price
        except Exception as e:
            print(f"‚ö†Ô∏è {self.symbol}: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞: {e}")

    def _cancel_all_stops(self):
        try:
            orders = self.exchange.fetch_open_orders(self.symbol)
            for order in orders:
                if order['type'] == 'stop_market' and order.get('reduceOnly'):
                    self.exchange.cancel_order(order['id'], self.symbol)
                    print(f"üóëÔ∏è {self.symbol}: –û—Ç–º–µ–Ω—ë–Ω —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä ID: {order['id']}")
        except Exception as e:
            print(f"‚ö†Ô∏è {self.symbol}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä–∞: {e}")
    
    def get_position_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            positions = self.exchange.fetch_positions([self.symbol])
            for position in positions:
                if position['symbol'] == self.symbol and position['contracts'] > 0:
                    return {
                        'side': position['side'],
                        'size': position['contracts'],
                        'entry_price': position['entryPrice'],
                        'unrealized_pnl': position['unrealizedPnl'],
                        'leverage': position['leverage']
                    }
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏ {self.symbol}: {e}")
            return None
