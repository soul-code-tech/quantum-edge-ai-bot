from flask import Flask
import threading
import time
import os
from data_fetcher import get_bars
from strategy import calculate_strategy_signals
from trader import BingXTrader
from lstm_model import LSTMPredictor
import ccxt

app = Flask(__name__)
_bot_started = False

SYMBOLS = [
    'BTC-USDT', 'ETH-USDT', 'SOL-USDT', 'BNB-USDT',
    'XRP-USDT', 'DOGE-USDT', 'AVAX-USDT', 'SHIB-USDT',
    'LINK-USDT', 'PENGU-USDT'
]
RISK_PERCENT      = 1.0
STOP_LOSS_PCT     = 1.5
TAKE_PROFIT_PCT   = 3.0
TRAILING_PCT      = 1.0
LSTM_CONFIDENCE   = 0.75
TIMEFRAME         = '1h'
LOOKBACK          = 200
SIGNAL_COOLDOWN   = 3600
UPDATE_TRAILING_INTERVAL = 300
INITIAL_EPOCHS    = 5
RETRAIN_EPOCHS    = 2
RETRAIN_INTERVAL  = 30 * 60          # 30 –º–∏–Ω—É—Ç

lstm_models       = {}
traders           = {}
last_signal_time  = {}
last_trailing_update = {}
last_retrain_time = 0
total_trades      = 0

print("‚úÖ [–°–¢–ê–†–¢] Quantum Edge AI Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ {} –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä–∞—Ö".format(len(SYMBOLS)))
print(f"üìä –ü–ê–†–´: {', '.join(SYMBOLS)}")
print(f"üß† LSTM: –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ {LSTM_CONFIDENCE * 100}%")
print(f"üí∏ –†–∏—Å–∫: {RISK_PERCENT}% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É")
print(f"‚õî –°—Ç–æ–ø-–ª–æ—Å—Å: {STOP_LOSS_PCT}% | üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {TAKE_PROFIT_PCT}%")
print(f"üìà –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: {TRAILING_PCT}% –æ—Ç —Ü–µ–Ω—ã")
print(f"‚è≥ –ö—É–ª–¥–∞—É–Ω: {SIGNAL_COOLDOWN} —Å–µ–∫. –Ω–∞ –ø–∞—Ä—É")
print(f"üîÑ –î–æ–æ–±—É—á–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {RETRAIN_INTERVAL // 60} –º–∏–Ω—É—Ç –Ω–∞ {RETRAIN_EPOCHS} —ç–ø–æ—Ö–∞—Ö")

# --------------------- helpers ---------------------
_bingx_markets = None   # –∫—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤

def market_exists(symbol: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ –Ω–∞ BingX (swap). –ö—ç—à–∏—Ä—É–µ—Ç markets –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ."""
    global _bingx_markets
    if _bingx_markets is None:
        try:
            exch = ccxt.bingx({'options': {'defaultType': 'swap'}, 'enableRateLimit': True})
            exch.load_markets()
            _bingx_markets = exch.markets
        except Exception as e:
            print(f'‚ö†Ô∏è market_exists: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—ã–Ω–∫–∏ ‚Äì {e}')
            return False
    return symbol in _bingx_markets

def initialize_models():
    global lstm_models
    os.makedirs('weights', exist_ok=True)
    for s in SYMBOLS:
        lstm_models[s] = LSTMPredictor(lookback=60, model_dir='weights')

def perform_initial_training():
    """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ 5 —ç–ø–æ—Ö, –µ—Å–ª–∏ –≤–µ—Å–∞ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."""
    for sym in SYMBOLS:
        if not market_exists(sym):
            print(f'‚ö†Ô∏è {sym}: –Ω–µ—Ç –Ω–∞ BingX ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
            continue
        if lstm_models[sym].load(sym):          # –≤–µ—Å–∞ —É–∂–µ –µ—Å—Ç—å
            print(f'‚úÖ {sym}: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –º–æ–¥–µ–ª—å')
            continue
        print(f'\nüéì {sym}: –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ({INITIAL_EPOCHS} —ç–ø–æ—Ö)...')
        df = get_bars(sym, TIMEFRAME, 500)
        if df is None or len(df) < 300:
            print(f'‚ùå {sym}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö')
            continue
        df = calculate_strategy_signals(df, 60)
        ok = lstm_models[sym].train_model(df, sym, epochs=INITIAL_EPOCHS, is_initial=True)
        if ok:
            lstm_models[sym].save(sym)

def perform_retraining():
    """–î–æ–æ–±—É—á–µ–Ω–∏–µ 2 —ç–ø–æ—Ö–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç."""
    global last_retrain_time
    if time.time() - last_retrain_time < RETRAIN_INTERVAL:
        return
    print(f'\nüîÑ –ù–∞—á–∞–ª–æ –¥–æ–æ–±—É—á–µ–Ω–∏—è ({RETRAIN_EPOCHS} —ç–ø–æ—Ö)...')
    for sym in SYMBOLS:
        if not market_exists(sym):
            continue
        print(f'üß† {sym}: –¥–æ–æ–±—É—á–µ–Ω–∏–µ...')
        df = get_bars(sym, TIMEFRAME, LOOKBACK)
        if df is None or len(df) < 100:
            continue
        df = calculate_strategy_signals(df, 60)
        ok = lstm_models[sym].train_model(df, sym, epochs=RETRAIN_EPOCHS, is_initial=False)
        if ok:
            lstm_models[sym].save(sym)
    last_retrain_time = time.time()

# --------------------- –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---------------------
def run_strategy():
    global last_signal_time, last_trailing_update, last_retrain_time, total_trades

    initialize_models()
    perform_initial_training()
    last_retrain_time = time.time()

    print('\nüöÄ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!')
    while True:
        try:
            perform_retraining()
            for symbol in SYMBOLS:
                if not market_exists(symbol):
                    continue
                print(f"\n--- [{time.strftime('%H:%M:%S')}] {symbol} ---")
                df = get_bars(symbol, TIMEFRAME, LOOKBACK)
                if df is None or len(df) < 100:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue
                df = calculate_strategy_signals(df, 60)
                current_price = df['close'].iloc[-1]
                buy_signal  = df['buy_signal'].iloc[-1]
                sell_signal = df['sell_signal'].iloc[-1]
                long_score  = df['long_score'].iloc[-1]
                short_score = df['short_score'].iloc[-1]

                if time.time() - last_signal_time.get(symbol, 0) < SIGNAL_COOLDOWN:
                    print(f"‚è≥ –ö—É–ª–¥–∞—É–Ω: {symbol} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                lstm_prob = lstm_models[symbol].predict_next(df)
                lstm_conf = lstm_prob > LSTM_CONFIDENCE
                print(f"üß† LSTM: {lstm_prob:.2%} ‚Üí {'‚úÖ' if lstm_conf else '‚ùå'}")

                strong = (buy_signal and long_score >= 5) or (sell_signal and short_score >= 5)
                if strong and lstm_conf:
                    side = 'buy' if buy_signal else 'sell'
                    print(f"üéØ [–°–ò–ì–ù–ê–õ] {side.upper()} –Ω–∞ {symbol}")
                    atr     = df['atr'].iloc[-1]
                    equity  = 100.0
                    risk_am = equity * (RISK_PERCENT / 100)
                    amount  = risk_am / (atr * 1.5) if atr > 0 else 0.001
                    amount  = max(amount, 0.001)
                    print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {amount:.6f}")
                    order   = traders[symbol].place_order(
                        side=side,
                        amount=amount,
                        stop_loss_percent=STOP_LOSS_PCT,
                        take_profit_percent=TAKE_PROFIT_PCT
                    )
                    if order:
                        total_trades += 1
                        last_signal_time[symbol] = time.time()
                else:
                    print(f"‚ö†Ô∏è {symbol}: —Å–∏–≥–Ω–∞–ª —Å–ª–∞–±—ã–π –∏–ª–∏ LSTM –Ω–µ —É–≤–µ—Ä–µ–Ω")

            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if time.time() - last_trailing_update.get('global', 0) > UPDATE_TRAILING_INTERVAL:
                for s in SYMBOLS:
                    if market_exists(s):
                        traders[s].update_trailing_stop()
                last_trailing_update['global'] = time.time()

            # —Ç–µ—Å—Ç-–æ—Ä–¥–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω ‚Äì –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ—à–∞–µ—Ç –æ–±—É—á–µ–Ω–∏—é
            time.sleep(60)
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢: {e}")
            time.sleep(60)

# --------------------- flask ---------------------
@app.before_request
def start_bot_once():
    global _bot_started
    if not _bot_started:
        threading.Thread(target=run_strategy, daemon=True).start()
        _bot_started = True

@app.route('/')
def wake_up():
    trained = sum(1 for s in SYMBOLS if os.path.exists(f'weights/lstm_{s.replace("-","_")}.weights.h5'))
    return (f"‚úÖ Quantum Edge AI Bot is LIVE on {len(SYMBOLS)} cryptos!<br>"
            f"üìä Trained models: {trained}/{len(SYMBOLS)}<br>"
            f"üîÑ Retraining every {RETRAIN_INTERVAL//60} min"), 200

@app.route('/health')
def health():
    return "OK", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host='0.0.0.0', port=port)
