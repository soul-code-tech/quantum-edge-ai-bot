# trader.py ‚Äî –§–ò–ù–ê–õ–¨–ù–ê–Ø, –ü–†–û–í–ï–†–ï–ù–ù–ê–Ø, –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –∫–ª–∞—Å—Å–∞)
import ccxt
import os
import time
from dotenv import load_dotenv

load_dotenv()

class BingXTrader:  # ‚Üê –≠–¢–û –î–û–õ–ñ–ù–û –ë–´–¢–¨ –¢–û–ß–ù–û –¢–ê–ö! –ù–ï –ò–ó–ú–ï–ù–Ø–ô –ò–ú–Ø!
    def __init__(self, symbol='BTC-USDT', use_demo=False):
        self.symbol = symbol
        self.use_demo = use_demo
        self.exchange = ccxt.bingx({
            'apiKey': os.getenv('BINGX_API_KEY'),
            'secret': os.getenv('BINGX_SECRET_KEY'),
            'options': {'defaultType': 'swap'},
            'enableRateLimit': True,
        })
        if use_demo:
            self.exchange.set_sandbox_mode(True)

    def place_order(self, side, amount, stop_loss_percent=1.5, take_profit_percent=3.0):
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {side} {amount}")
            market_order = self.exchange.create_order(
                symbol=self.symbol,
                type='market',
                side=side,
                amount=amount
            )
            order_id = market_order.get('id', 'N/A')
            print(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_id}")

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –∏–∑ –æ—Ä–¥–µ—Ä–∞
            entry_price = market_order.get('price', None)
            if not entry_price:
                ticker = self.exchange.fetch_ticker(self.symbol)
                entry_price = ticker['last']

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã TP/SL –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            if side == 'buy':
                stop_loss_price = entry_price * (1 - stop_loss_percent / 100)
                take_profit_price = entry_price * (1 + take_profit_percent / 100)
            else:  # sell
                stop_loss_price = entry_price * (1 + stop_loss_percent / 100)
                take_profit_price = entry_price * (1 - take_profit_percent / 100)

            print(f"üìä –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f}")
            print(f"‚õî –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (stop_market): {stop_loss_price:.2f} ({stop_loss_percent}%)")
            print(f"üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (limit): {take_profit_price:.2f} ({take_profit_percent}%)")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
            self.exchange.create_order(
                symbol=self.symbol,
                type='stop_market',
                side='sell' if side == 'buy' else 'buy',
                amount=amount,
                params={
                    'stopPrice': stop_loss_price,
                    'reduceOnly': True
                }
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            self.exchange.create_order(
                symbol=self.symbol,
                type='limit',
                side='sell' if side == 'buy' else 'buy',
                amount=amount,
                price=take_profit_price,
                params={'reduceOnly': True}
            )

            print("‚úÖ –£–°–ü–ï–•! –í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (TP/SL –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞)")
            return market_order

        except Exception as e:
            error_str = str(e)
            if "position not exist" in error_str:
                print("‚ùå –û–®–ò–ë–ö–ê: –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª—Å—è.")
            elif "Invalid order quantity" in error_str:
                print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ amount > 0.")
            elif "Invalid order type" in error_str:
                print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π 'stop_market' –∏ 'limit'.")
            elif "reduceOnly" in error_str:
                print("‚ùå –û–®–ò–ë–ö–ê: reduceOnly —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω.")
            else:
                print(f"‚ùå –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ API: {type(e).__name__}: {error_str}")
            return None
