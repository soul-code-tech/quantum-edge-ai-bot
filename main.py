# main.py ‚Äî –ü–æ–ª–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è (–±–µ–∑ Telegram, —Å –ª–æ–≥–∞–º–∏, —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏)

from flask import Flask
import threading
import time
import os
from data_fetcher import get_bars
from strategy import calculate_strategy_signals
from trader import BingXTrader

app = Flask(__name__)
bot_running = False
_bot_started = False  # –§–ª–∞–≥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑

def trading_bot():
    global bot_running
    if bot_running:
        return
    bot_running = True

    print("‚úÖ [–°–¢–ê–†–¢] Quantum Edge AI Bot –∑–∞–ø—É—â–µ–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫...")
    print("üìä –õ–æ–≥–∏ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É. –û—Ä–¥–µ—Ä–∞ –≤ –¥–µ–º–æ ‚Äî –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")

    symbol = 'BTC/USDT'
    trader = BingXTrader(symbol=symbol, use_demo=True)  # –î–µ–º–æ-—Ä–µ–∂–∏–º (VST)
    last_signal_time = 0
    signal_cooldown = 3600  # 1 —á–∞—Å –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
    last_forced_order = 0
    force_order_interval = 300  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–¥–ª—è —Ç–µ—Å—Ç–∞)

    while True:
        try:
            current_time = time.time()
            print(f"\n--- [{time.strftime('%Y-%m-%d %H:%M:%S')}] ---")
            print("üîÑ –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å BingX...")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π
            df = get_bars(symbol, '1h', 100)
            if df is None or len(df) < 50:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 60 —Å–µ–∫.")
                time.sleep(60)
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            df = calculate_strategy_signals(df, 60)
            current_price = df['close'].iloc[-1]
            buy_signal = df['buy_signal'].iloc[-1]
            sell_signal = df['sell_signal'].iloc[-1]
            long_score = df['long_score'].iloc[-1]
            short_score = df['short_score'].iloc[-1]

            print(f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.4f} USDT")
            print(f"üìä –°–∫–æ—Ä—ã: Long={long_score}/6 | Short={short_score}/6")
            print(f"üö¶ –°–∏–≥–Ω–∞–ª—ã: Buy={buy_signal} | Sell={sell_signal}")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BingX)
            if current_time - last_forced_order > force_order_interval:
                print("\nüéØ [–¢–ï–°–¢] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä BUY (–¥–µ–º–æ-—Ä–µ–∂–∏–º)")
                side = 'buy'
                amount = 0.001  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
                atr = df['atr'].iloc[-1] if 'atr' in df.columns else 50
                stop_loss = current_price - atr * 1.5
                take_profit = current_price + atr * 3

                print(f"üí∏ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é: {side.upper()} {amount} BTC –ø–æ ~{current_price:.2f}")
                order = trader.place_order(side, amount, stop_loss, take_profit)
                if order:
                    print(f"‚úÖ –£–°–ü–ï–•! –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω. ID: {order.get('id', 'N/A')}")
                    print(f"‚õî –°—Ç–æ–ø-–ª–æ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {stop_loss:.2f}")
                    print(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {take_profit:.2f}")
                else:
                    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á–∏ API –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.")

                last_forced_order = current_time
                print("‚è≥ –°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")

            # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∫–ª—é—á–∏—Ç—å ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π)
            # if (buy_signal or sell_signal) and (current_time - last_signal_time > signal_cooldown):
            #     # ... —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ ...
            #     last_signal_time = current_time

            print("üí§ –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            time.sleep(60)

        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {type(e).__name__}: {str(e)}")
            print("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
@app.before_request
def start_bot_once():
    global _bot_started
    if not _bot_started:
        thread = threading.Thread(target=trading_bot, daemon=True)
        thread.start()
        print("üöÄ [–°–ò–°–¢–ï–ú–ê] –§–æ–Ω–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        _bot_started = True

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è" —Å–µ—Ä–≤–∏—Å–∞ (UptimeRobot)
@app.route('/')
def wake_up():
    return "‚úÖ Quantum Edge AI Bot is LIVE and analyzing market!", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print(f"üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port)
