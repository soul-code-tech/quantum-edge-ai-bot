# main.py ‚Äî –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: LSTM + –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü + –†–ê–ë–û–¢–ê–ï–¢ –ù–ê RENDER
from flask import Flask
import threading
import time
import os
from data_fetcher import get_bars
from strategy import calculate_strategy_signals
from trader import BingXTrader

app = Flask(__name__)
bot_running = False
_bot_started = False

def trading_bot():
    global bot_running
    if bot_running:
        return
    bot_running = True

    print("‚úÖ [–°–¢–ê–†–¢] Quantum Edge AI Bot –∑–∞–ø—É—â–µ–Ω. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫...")
    print("üìä –õ–æ–≥–∏ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É. –û—Ä–¥–µ—Ä–∞ –≤ –¥–µ–º–æ ‚Äî –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")
    print("üß† LSTM-—Ñ–∏–ª—å—Ç—Ä –∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")

    symbol = 'BTC-USDT'
    trader = BingXTrader(symbol=symbol, use_demo=True)  # –î–µ–º–æ-—Ä–µ–∂–∏–º (VST)
    
    last_signal_time = 0
    signal_cooldown = 3600  # 1 —á–∞—Å –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
    last_forced_order = 0
    force_order_interval = 300  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    last_trailing_update = 0  # –î–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥–∞

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LSTM-–º–æ–¥–µ–ª—å (–±—É–¥–µ—Ç –æ–±—É—á–∞—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ)
    from lstm_model import LSTMPredictor
    lstm = LSTMPredictor(lookback=60)

    while True:
        try:
            current_time = time.time()
            print(f"\n--- [{time.strftime('%Y-%m-%d %H:%M:%S')}] ---")
            print("üîÑ –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å BingX...")

            # –ü–æ–ª—É—á–∞–µ–º 200 —Å–≤–µ—á–µ–π –¥–ª—è LSTM –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            df = get_bars(symbol, '1h', 200)
            if df is None or len(df) < 100:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ñ–¥—ë–º 60 —Å–µ–∫.")
                time.sleep(60)
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            df = calculate_strategy_signals(df, 60)
            current_price = df['close'].iloc[-1]
            buy_signal = df['buy_signal'].iloc[-1]
            sell_signal = df['sell_signal'].iloc[-1]
            long_score = df['long_score'].iloc[-1]
            short_score = df['short_score'].iloc[-1]

            print(f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.4f} USDT")
            print(f"üìä –°–∫–æ—Ä—ã: Long={long_score}/6 | Short={short_score}/6")
            print(f"üö¶ –°–∏–≥–Ω–∞–ª—ã: Buy={buy_signal} | Sell={sell_signal}")

            # ‚úÖ LSTM-—Ñ–∏–ª—å—Ç—Ä: –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞
            lstm_prob = lstm.predict_next(df)
            lstm_confident = lstm_prob > 0.60  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å > 60%
            print(f"üß† LSTM: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ {lstm_prob:.2%} ‚Üí {'‚úÖ –î–û–ü–£–°–¢–ò–ú' if lstm_confident else '‚ùå –û–¢–ö–õ–û–ù–ï–ù–û'}")

            # ‚úÖ –í–•–û–î –¢–û–õ–¨–ö–û –ï–°–õ–ò: —Å–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ + LSTM –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç
            if (buy_signal and lstm_confident) or (sell_signal and lstm_confident):
                if current_time - last_signal_time < signal_cooldown:
                    print("‚è≥ –ö—É–ª–¥–∞—É–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª")
                    time.sleep(60)
                    continue

                side = 'buy' if buy_signal else 'sell'
                amount = 0.001  # –î–ª—è —Ç–µ—Å—Ç–∞ ‚Äî –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å

                print(f"\nüéØ [–°–ò–ì–ù–ê–õ] {side.upper()} —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º LSTM!")
                order = trader.place_order(
                    side=side,
                    amount=amount,
                    stop_loss_percent=1.5,
                    take_profit_percent=3.0
                )

                if order:
                    print("‚úÖ –£–°–ü–ï–•! –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –¥–µ–º–æ-—Å—á—ë—Ç BingX.")
                else:
                    print("‚ùå –û–®–ò–ë–ö–ê: –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –≤—ã—à–µ.")

                last_signal_time = current_time

            # ‚úÖ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if current_time - last_trailing_update > 300:
                trader.update_trailing_stop()
                last_trailing_update = current_time

            # ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if current_time - last_forced_order > force_order_interval:
                print("\nüéØ [–¢–ï–°–¢] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä BUY (–¥–µ–º–æ-—Ä–µ–∂–∏–º)")
                order = trader.place_order(
                    side='buy',
                    amount=0.001,
                    stop_loss_percent=1.5,
                    take_profit_percent=3.0
                )
                if order:
                    print("‚úÖ –£–°–ü–ï–•! –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                else:
                    print("‚ùå –û–®–ò–ë–ö–ê: –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

                last_forced_order = current_time
                print("‚è≥ –°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")

            print("üí§ –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            time.sleep(60)

        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {type(e).__name__}: {str(e)}")
            print("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º HTTP-–∑–∞–ø—Ä–æ—Å–µ (–¥–ª—è Render)
@app.before_request
def start_bot_once():
    global _bot_started
    if not _bot_started:
        thread = threading.Thread(target=trading_bot, daemon=True)
        thread.start()
        print("üöÄ [–°–ò–°–¢–ï–ú–ê] –§–æ–Ω–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        _bot_started = True

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è" —Å–µ—Ä–≤–∏—Å–∞ (UptimeRobot)
@app.route('/')
def wake_up():
    return "‚úÖ Quantum Edge AI Bot is LIVE and analyzing market!", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print(f"üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port)
