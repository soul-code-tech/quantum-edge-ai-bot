# main.py
import os
import threading
import logging
from flask import Flask
import ccxt
from data_fetcher import get_bars
from strategy import calculate_strategy_signals
from lstm_model import LSTMPredictor
from trainer import load_model, train_one

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger("main")

# –°–∏–º–≤–æ–ª—ã
SYMBOLS = [
    "BTC/USDT:USDT", "ETH/USDT:USDT", "SOL/USDT:USDT", "BNB/USDT:USDT",
    "XRP/USDT:USDT", "DOGE/USDT:USDT", "AVAX/USDT:USDT", "SHIB/USDT:USDT",
    "LINK/USDT:USDT", "PENGU/USDT:USDT"
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
lstm_models = {}

app = Flask(__name__)

@app.route("/")
def home():
    return "‚úÖ Quantum Edge AI Bot is running!"

@app.route("/health")
def health():
    return {"status": "ok"}

def market_exists(symbol: str) -> bool:
    try:
        exchange = ccxt.bingx({'options': {'defaultType': 'swap'}, 'enableRateLimit': True})
        markets = exchange.load_markets()
        if symbol in markets:
            market = markets[symbol]
            return market.get('type') == 'swap' and market.get('active', False)
        return False
    except Exception as e:
        logger.warning(f"market_exists({symbol}) error: {e}")
        return False

def initialize_models():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏: –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ."""
    global lstm_models
    for s in SYMBOLS:
        if not market_exists(s):
            logger.warning(f"–†—ã–Ω–æ–∫ {s} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        model = load_model(s, lookback=60)
        if model is not None:
            lstm_models[s] = model
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –¥–ª—è {s} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        else:
            logger.info(f"üÜï –ú–æ–¥–µ–ª—å –¥–ª—è {s} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–≥–æ—Ç–æ–≤–∫—É")
            lstm_models[s] = LSTMPredictor(lookback=60)  # ‚Üê –ë–ï–ó model_dir!

def run_strategy():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–æ–æ–±—É—á–µ–Ω–∏—è (–≤ —Ñ–æ–Ω–µ)."""
    initialize_models()
    while True:
        for symbol in SYMBOLS:
            try:
                logger.info(f"üîÑ –î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}")
                model = lstm_models.get(symbol)
                if model and hasattr(model, 'is_trained') and model.is_trained:
                    success = train_one(symbol, epochs=2, existing_model=model)
                else:
                    success = train_one(symbol, epochs=2)
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ –ø–∞–º—è—Ç–∏
                    updated = load_model(symbol, lookback=60)
                    if updated:
                        lstm_models[symbol] = updated
                        logger.info(f"üß† –ú–æ–¥–µ–ª—å {symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è {symbol}: {e}")
        logger.info("‚è≥ –ñ–¥—ë–º 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è...")
        import time
        time.sleep(1800)  # 30 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    logger.info("‚úÖ [–°–¢–ê–†–¢] Quantum Edge AI Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ 10 –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä–∞—Ö")
    logger.info(f"üìä –ü–ê–†–´: {', '.join([s.replace('/USDT:USDT', '') for s in SYMBOLS])}")
    logger.info("üß† LSTM: –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ 75.0%")
    logger.info("üí∏ –†–∏—Å–∫: 1.0% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É")
    logger.info("‚õî –°—Ç–æ–ø-–ª–æ—Å—Å: 1.5% | üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 3.0%")
    logger.info("üìà –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: 1.0% –æ—Ç —Ü–µ–Ω—ã")
    logger.info("‚è≥ –ö—É–ª–¥–∞—É–Ω: 3600 —Å–µ–∫. –Ω–∞ –ø–∞—Ä—É")
    logger.info("üîÑ –î–æ–æ–±—É—á–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –Ω–∞ 2 —ç–ø–æ—Ö–∞—Ö")

    # –ó–∞–ø—É—Å–∫ –¥–æ–æ–±—É—á–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
    strategy_thread = threading.Thread(target=run_strategy, daemon=True)
    strategy_thread.start()

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 10000 (Render)
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=False)
