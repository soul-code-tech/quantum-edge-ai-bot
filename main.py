from flask import Flask
import threading
import time
import os
from data_fetcher import get_bars
from strategy import calculate_strategy_signals
from trader import BingXTrader
from lstm_model import LSTMPredictor

app = Flask(__name__)
_bot_started = False

SYMBOLS = [
    'BTC-USDT', 'ETH-USDT', 'SOL-USDT', 'BNB-USDT',
    'XRP-USDT', 'DOGE-USDT', 'TON-USDT', 'AVAX-USDT',
    'SHIB-USDT', 'LINK-USDT', 'PENGU-USDT'
]

RISK_PERCENT = 1.0
STOP_LOSS_PCT = 1.5
TAKE_PROFIT_PCT = 3.0
TRAILING_PCT = 1.0
LSTM_CONFIDENCE = 0.75
TIMEFRAME = '1h'
LOOKBACK = 200
SIGNAL_COOLDOWN = 3600
UPDATE_TRAILING_INTERVAL = 300
TEST_INTERVAL = 300
RETRAIN_INTERVAL_MINUTES = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–æ–±—É—á–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
lstm_models = {}
traders = {}
models_initially_trained = {}
last_signal_time = {}
last_trailing_update = {}
last_test_order = 0
last_retrain_time = 0
total_trades = 0

print("‚úÖ [–°–¢–ê–†–¢] Quantum Edge AI Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ 11 –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä–∞—Ö")
print(f"üìä –ü–ê–†–´: {', '.join(SYMBOLS)}")
print(f"üß† LSTM: –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ {LSTM_CONFIDENCE * 100}%")
print(f"üí∏ –†–∏—Å–∫: {RISK_PERCENT}% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É")
print(f"‚õî –°—Ç–æ–ø-–ª–æ—Å—Å: {STOP_LOSS_PCT}% | üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {TAKE_PROFIT_PCT}%")
print(f"üìà –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: {TRAILING_PCT}% –æ—Ç —Ü–µ–Ω—ã")
print(f"‚è≥ –ö—É–ª–¥–∞—É–Ω: {SIGNAL_COOLDOWN} —Å–µ–∫. –Ω–∞ –ø–∞—Ä—É")
print(f"üîÑ –î–æ–æ–±—É—á–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ {RETRAIN_INTERVAL_MINUTES} –º–∏–Ω—É—Ç –Ω–∞ 2 —ç–ø–æ—Ö–∞—Ö")

def initialize_models():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    global lstm_models, traders, models_initially_trained
    
    print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤...")
    
    for symbol in SYMBOLS:
        print(f"\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {symbol}...")
        
        # –°–æ–∑–¥–∞–µ–º LSTM –º–æ–¥–µ–ª—å
        lstm_models[symbol] = LSTMPredictor(lookback=60, model_dir='weights')
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
        model_loaded = lstm_models[symbol].load_or_create_model(symbol)
        
        if not model_loaded:
            print(f"‚ö†Ô∏è –î–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
            models_initially_trained[symbol] = False
        else:
            print(f"‚úÖ –î–ª—è {symbol} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
            models_initially_trained[symbol] = True
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞
        traders[symbol] = BingXTrader(symbol=symbol, use_demo=True, leverage=10)
    
    print(f"\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. {len(SYMBOLS)} –ø–∞—Ä –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")

def perform_initial_training():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    global models_initially_trained, lstm_models
    
    print("\nüéì –ù–∞—á–∞–ª–æ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π...")
    print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (5 —ç–ø–æ—Ö –Ω–∞ –∫–∞–∂–¥—É—é –ø–∞—Ä—É)...")
    
    for symbol in SYMBOLS:
        if not models_initially_trained.get(symbol, False):
            print(f"\nüß† –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ {symbol} (5 —ç–ø–æ—Ö)...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è)
                df = get_bars(symbol, TIMEFRAME, 500)  # 500 –≤–º–µ—Å—Ç–æ 200 –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è
                
                if df is None or len(df) < 100:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è {symbol}")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                df = calculate_strategy_signals(df, 60)
                
                # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ 5 —ç–ø–æ—Ö
                success = lstm_models[symbol].train_model(
                    df, 
                    symbol, 
                    epochs=5, 
                    is_initial=True
                )
                
                if success:
                    models_initially_trained[symbol] = True
                    print(f"‚úÖ –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ {symbol}")
                    
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {symbol}: {e}")
    
    print("\n‚úÖ –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –æ–±—É—á–µ–Ω–æ
    trained_count = sum(1 for trained in models_initially_trained.values() if trained)
    print(f"üìä –û–±—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {trained_count}/{len(SYMBOLS)}")

def perform_retraining():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
    global lstm_models, last_retrain_time
    
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 30 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–æ–±—É—á–µ–Ω–∏—è
    if current_time - last_retrain_time < (RETRAIN_INTERVAL_MINUTES * 60):
        return
    
    print(f"\nüîÑ –ù–∞—á–∞–ª–æ –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ({RETRAIN_INTERVAL_MINUTES} –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ)...")
    
    retrained_count = 0
    
    for symbol in SYMBOLS:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
            if lstm_models[symbol].needs_retraining(RETRAIN_INTERVAL_MINUTES):
                print(f"\nüß† –î–æ–æ–±—É—á–µ–Ω–∏–µ {symbol} (2 —ç–ø–æ—Ö–∏)...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                df = get_bars(symbol, TIMEFRAME, LOOKBACK)
                
                if df is None or len(df) < 100:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è {symbol}")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                df = calculate_strategy_signals(df, 60)
                
                # –î–æ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ 2 —ç–ø–æ—Ö–∏
                success = lstm_models[symbol].train_model(
                    df,
                    symbol,
                    epochs=2,  # –î–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ 2 —ç–ø–æ—Ö–∏
                    is_initial=False
                )
                
                if success:
                    retrained_count += 1
                    print(f"‚úÖ –î–æ–æ–±—É—á–µ–Ω–∏–µ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è {symbol}")
            else:
                print(f"‚è≥ {symbol}: –î–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è {symbol}: {e}")
    
    last_retrain_time = current_time
    
    if retrained_count > 0:
        print(f"\n‚úÖ –î–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {retrained_count}")
    else:
        print(f"\n‚è≥ –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è")

def run_strategy():
    global last_signal_time, last_trailing_update, last_test_order, total_trades, last_retrain_time
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    initialize_models()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    perform_initial_training()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–æ–±—É—á–µ–Ω–∏—è
    last_retrain_time = time.time()
    
    print("\nüöÄ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!")
    print("üìä –ù–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
    
    while True:
        try:
            current_time = time.time()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            perform_retraining()
            
            for symbol in SYMBOLS:
                print(f"\n--- [{time.strftime('%H:%M:%S')}] {symbol} ---")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                df = get_bars(symbol, TIMEFRAME, LOOKBACK)
                if df is None or len(df) < 100:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                df = calculate_strategy_signals(df, 60)
                current_price = df['close'].iloc[-1]
                buy_signal = df['buy_signal'].iloc[-1]
                sell_signal = df['sell_signal'].iloc[-1]
                long_score = df['long_score'].iloc[-1]
                short_score = df['short_score'].iloc[-1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
                last_time = last_signal_time.get(symbol, 0)
                if current_time - last_time < SIGNAL_COOLDOWN:
                    print(f"‚è≥ –ö—É–ª–¥–∞—É–Ω: {symbol} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ LSTM
                lstm_prob = lstm_models[symbol].predict_next(df)
                lstm_confident = lstm_prob > LSTM_CONFIDENCE
                
                print(f"üß† LSTM: {symbol} ‚Äî {lstm_prob:.2%} ‚Üí {'‚úÖ –î–û–ü–£–°–¢–ò–ú' if lstm_confident else '‚ùå –û–¢–ö–õ–û–ù–ï–ù–û'}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strong_strategy = (buy_signal and long_score >= 5) or (sell_signal and short_score >= 5)
                
                if strong_strategy and lstm_confident:
                    side = 'buy' if buy_signal else 'sell'
                    print(f"üéØ [–°–ò–ì–ù–ê–õ] {side.upper()} –Ω–∞ {symbol}")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                    atr = df['atr'].iloc[-1]
                    equity = 100.0  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
                    risk_amount = equity * (RISK_PERCENT / 100)
                    stop_distance = atr * 1.5
                    amount = risk_amount / stop_distance if stop_distance > 0 else 0.001
                    
                    if amount < 0.001:
                        amount = 0.001
                    
                    print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {amount:.6f} {symbol.split('-')[0]} | ATR: {atr:.4f}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä
                    order = traders[symbol].place_order(
                        side=side,
                        amount=amount,
                        stop_loss_percent=STOP_LOSS_PCT,
                        take_profit_percent=TAKE_PROFIT_PCT
                    )
                    
                    if order:
                        print(f"‚úÖ –£–°–ü–ï–•! –û—Ä–¥–µ—Ä {side} –Ω–∞ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                        total_trades += 1
                        last_signal_time[symbol] = current_time
                    else:
                        print(f"‚ùå –û–®–ò–ë–ö–ê: –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {symbol}")
                else:
                    if buy_signal or sell_signal:
                        print(f"‚ö†Ô∏è {symbol}: –°–∏–≥–Ω–∞–ª –µ—Å—Ç—å, –Ω–æ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π (score={long_score if buy_signal else short_score}) –∏–ª–∏ LSTM –Ω–µ —É–≤–µ—Ä–µ–Ω ({lstm_prob:.2%}) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if current_time - last_trailing_update.get('global', 0) > UPDATE_TRAILING_INTERVAL:
                print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä...")
                for symbol in SYMBOLS:
                    traders[symbol].update_trailing_stop()
                last_trailing_update['global'] = current_time
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if current_time - last_test_order > TEST_INTERVAL:
                test_symbol = SYMBOLS[0]  # BTC-USDT
                print(f"\nüéØ [–¢–ï–°–¢] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π BUY –Ω–∞ {test_symbol} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏...")
                traders[test_symbol].place_order(
                    side='buy',
                    amount=0.001,
                    stop_loss_percent=STOP_LOSS_PCT,
                    take_profit_percent=TAKE_PROFIT_PCT
                )
                last_test_order = current_time
            
            print("\nüí§ –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
            time.sleep(60)
            
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {type(e).__name__}: {str(e)}")
            print("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)

@app.before_request
def start_bot_once():
    global _bot_started
    if not _bot_started:
        thread = threading.Thread(target=run_strategy, daemon=True)
        thread.start()
        print("üöÄ [–°–ò–°–¢–ï–ú–ê] –§–æ–Ω–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        _bot_started = True

@app.route('/')
def wake_up():
    trained_count = sum(1 for trained in models_initially_trained.values() if trained)
    return f"‚úÖ Quantum Edge AI Bot is LIVE on {len(SYMBOLS)} cryptos!<br>üìä Trained models: {trained_count}/{len(SYMBOLS)}<br>üîÑ Retraining every {RETRAIN_INTERVAL_MINUTES} min", 200

@app.route('/health')
def health_check():
    return "OK", 200

@app.route('/status')
def status():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    trained_count = sum(1 for trained in models_initially_trained.values() if trained)
    status_info = {
        'status': 'running',
        'symbols': len(SYMBOLS),
        'trained_models': f"{trained_count}/{len(SYMBOLS)}",
        'total_trades': total_trades,
        'retrain_interval_minutes': RETRAIN_INTERVAL_MINUTES,
        'last_retrain_time': time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(last_retrain_time)) if last_retrain_time > 0 else 'never'
    }
    
    return str(status_info), 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print(f"üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port)
