# main.py
import os
import sys
import logging
import threading
import time
import requests
from flask import Flask
from data_fetcher import get_bars
from strategy import calculate_strategy_signals
from trader import BingXTrader
from lstm_model import LSTMPredictor
from trainer import train_one, load_model, download_weights, sequential_trainer
from position_monitor import start_position_monitor
from signal_cache import is_fresh_signal
from config import USE_DEMO, LEVERAGE, RISK_PERCENT, STOP_LOSS_PCT, TAKE_PROFIT_PCT, LSTM_CONFIDENCE, TIMEFRAME, COOLDOWN_SECONDS, SYMBOLS

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger("main")

# === Flask ===
app = Flask(__name__)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ ===
lstm_models = {}
traders = {}
for s in SYMBOLS:
    lstm_models[s] = LSTMPredictor()
    traders[s] = BingXTrader(symbol=s, use_demo=USE_DEMO, leverage=LEVERAGE)

# === –†–æ—É—Ç—ã ===
@app.route('/')
def wake_up():
    active = sum(1 for m in lstm_models.values() if getattr(m, 'is_trained', False))
    return f"‚úÖ Quantum Edge AI Bot LIVE | –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {active}/{len(SYMBOLS)}", 200

@app.route('/health')
def health_check():
    return "OK", 200

# === –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–≤ —Ñ–æ–Ω–µ) ===
def initial_training():
    logger.info("=== –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π (5 —ç–ø–æ—Ö) ===")
    for symbol in SYMBOLS:
        logger.info(f"üß† –û–±—É—á–∞–µ–º {symbol}...")
        success = train_one(symbol, epochs=5)
        if success:
            lstm_models[symbol].is_trained = True
            logger.info(f"‚úÖ {symbol} –æ–±—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ weights/")
        else:
            logger.warning(f"‚ùå {symbol} –Ω–µ –æ–±—É—á–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        time.sleep(2)
    logger.info("=== –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")

# === –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª ===
def run_strategy():
    logger.info("=== –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω ===")
    while True:
        try:
            for symbol in SYMBOLS:
                if not getattr(lstm_models[symbol], 'is_trained', False):
                    continue

                df = get_bars(symbol, TIMEFRAME, 500)
                if df is None or len(df) < 100:
                    continue

                df = calculate_strategy_signals(df, symbol, 60)

                if not is_fresh_signal(symbol, df):
                    continue

                current_price = df['close'].iloc[-1]
                buy_signal = df['buy_signal'].iloc[-1]
                sell_signal = df['sell_signal'].iloc[-1]
                long_score = df['long_score'].iloc[-1]
                short_score = df['short_score'].iloc[-1]

                model = lstm_models[symbol]
                lstm_prob = model.predict_next(df)
                lstm_confident = lstm_prob > LSTM_CONFIDENCE

                strong_strategy = (buy_signal and long_score >= 5) or (sell_signal and short_score >= 5)
                if strong_strategy and lstm_confident:
                    side = 'buy' if buy_signal else 'sell'
                    atr = df['atr'].iloc[-1]
                    amount = max(0.001, (100 * RISK_PERCENT / 100) / (atr * 1.5))
                    logger.info(f"üéØ [–°–ò–ì–ù–ê–õ] {side.upper()} {symbol} | P={lstm_prob:.2%} | ATR={atr:.2f} | Amt={amount:.4f}")
                    traders[symbol].place_order(
                        side=side,
                        amount=amount,
                        stop_loss_percent=STOP_LOSS_PCT,
                        take_profit_percent=TAKE_PROFIT_PCT
                    )

            time.sleep(60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            time.sleep(60)

# === –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã ===
def start_all():
    logger.info("=== –°–¢–ê–†–¢ –°–ò–°–¢–ï–ú–´ (Web Service) ===")
    logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(SYMBOLS)} –ø–∞—Ä: {SYMBOLS}")

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≤–µ—Å–∞
    download_weights()

    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ
    trained = 0
    for s in SYMBOLS:
        model = load_model(s)
        if model:
            lstm_models[s] = model
            lstm_models[s].is_trained = True
            trained += 1
            logger.info(f"‚úÖ {s} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ weights/")
        else:
            logger.warning(f"‚ö†Ô∏è {s} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –±—É–¥–µ—Ç –æ–±—É—á–µ–Ω–∞")

    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
    if trained == 0:
        logger.info("üß† –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–≤ —Ñ–æ–Ω–µ)...")
        threading.Thread(target=initial_training, daemon=True).start()
    else:
        missing = [s for s in SYMBOLS if not getattr(lstm_models[s], 'is_trained', False)]
        if missing:
            logger.info(f"üß† –î–æ–æ–±—É—á–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ (–≤ —Ñ–æ–Ω–µ): {missing}")
            threading.Thread(target=lambda: [train_one(s, epochs=5) and setattr(lstm_models[s], 'is_trained', True) for s in missing], daemon=True).start()

    # 4. –¢–æ—Ä–≥–æ–≤–ª—è –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=run_strategy, daemon=True).start()

    # 5. –î–æ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
    threading.Thread(target=sequential_trainer, args=(SYMBOLS, 3600, 2), daemon=True).start()

    # 6. –ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–π
    start_position_monitor(traders, SYMBOLS)

    logger.info("üöÄ Web Service –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω (Flask + background threads)")

# === Flask —Å—Ç–∞—Ä—Ç ===
if __name__ == "__main__":
    threading.Thread(target=start_all, daemon=True).start()
    port = int(os.environ.get("PORT", 10000))
    app.run(host='0.0.0.0', port=port)
