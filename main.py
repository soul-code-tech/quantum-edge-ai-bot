from flask import Flask
import threading  # ‚úÖ –≠–¢–û –ù–£–ñ–ù–û! –ë–ï–ó –≠–¢–û–ì–û ‚Äî –ü–ê–î–ï–ù–ò–ï!
import time
import os
from data_fetcher import get_bars
from strategy import calculate_strategy_signals
from trader import BingXTrader
from lstm_model import LSTMPredictor

app = Flask(__name__)
_bot_started = False

# üìä –°–ü–ò–°–û–ö –ü–ê–†
SYMBOLS = [
    'BTC-USDT', 'ETH-USDT', 'SOL-USDT', 'BNB-USDT',
    'XRP-USDT', 'DOGE-USDT', 'TON-USDT', 'AVAX-USDT',
    'SHIB-USDT', 'LINK-USDT', 'PENGU-USDT'
]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
RISK_PERCENT = 1.0
STOP_LOSS_PCT = 1.5
TAKE_PROFIT_PCT = 3.0
TRAILING_PCT = 1.0
LSTM_CONFIDENCE = 0.75
TIMEFRAME = '1h'
LOOKBACK = 200
SIGNAL_COOLDOWN = 3600
UPDATE_TRAILING_INTERVAL = 300
TEST_INTERVAL = 300

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
lstm_models = {}
traders = {}

for symbol in SYMBOLS:
    lstm_models[symbol] = LSTMPredictor(lookback=60)
    traders[symbol] = BingXTrader(symbol=symbol, use_demo=True, leverage=10)

print("‚úÖ [–°–¢–ê–†–¢] Quantum Edge AI Bot –∑–∞–ø—É—â–µ–Ω –Ω–∞ 10 –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä–∞—Ö")
print(f"üìä –ü–ê–†–´: {', '.join(SYMBOLS)}")
print(f"üß† LSTM: –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ {LSTM_CONFIDENCE * 100}%")
print(f"üí∏ –†–∏—Å–∫: {RISK_PERCENT}% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É")
print(f"‚õî –°—Ç–æ–ø-–ª–æ—Å—Å: {STOP_LOSS_PCT}% | üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {TAKE_PROFIT_PCT}%")
print(f"üìà –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: {TRAILING_PCT}% –æ—Ç —Ü–µ–Ω—ã")
print(f"‚è≥ –ö—É–ª–¥–∞—É–Ω: {SIGNAL_COOLDOWN} —Å–µ–∫. –Ω–∞ –ø–∞—Ä—É")

# üö¶ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_signal_time = {}
last_trailing_update = {}
last_test_order = 0
total_trades = 0

def run_strategy():
    global last_signal_time, last_trailing_update, last_test_order, total_trades

    while True:
        try:
            current_time = time.time()

            for symbol in SYMBOLS:
                print(f"\n--- [{time.strftime('%H:%M:%S')}] {symbol} ---")

                df = get_bars(symbol, TIMEFRAME, LOOKBACK)
                if df is None or len(df) < 100:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue

                df = calculate_strategy_signals(df, 60)
                current_price = df['close'].iloc[-1]
                buy_signal = df['buy_signal'].iloc[-1]
                sell_signal = df['sell_signal'].iloc[-1]
                long_score = df['long_score'].iloc[-1]
                short_score = df['short_score'].iloc[-1]

                last_time = last_signal_time.get(symbol, 0)
                if current_time - last_time < SIGNAL_COOLDOWN:
                    print(f"‚è≥ –ö—É–ª–¥–∞—É–Ω: {symbol} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                lstm_prob = lstm_models[symbol].predict_next(df)
                lstm_confident = lstm_prob > LSTM_CONFIDENCE
                print(f"üß† LSTM: {symbol} ‚Äî {lstm_prob:.2%} ‚Üí {'‚úÖ –î–û–ü–£–°–¢–ò–ú' if lstm_confident else '‚ùå –û–¢–ö–õ–û–ù–ï–ù–û'}")

                # ‚úÖ –£–°–õ–û–í–ò–ï –í–•–û–î–ê: –°–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ + LSTM
                strong_strategy = (buy_signal and long_score >= 5) or (sell_signal and short_score >= 5)
                if strong_strategy and lstm_confident:
                    side = 'buy' if buy_signal else 'sell'
                    print(f"üéØ [–°–ò–ì–ù–ê–õ] {side.upper()} –Ω–∞ {symbol}")

                    atr = df['atr'].iloc[-1]
                    equity = 100.0
                    risk_amount = equity * (RISK_PERCENT / 100)
                    stop_distance = atr * 1.5
                    amount = risk_amount / stop_distance if stop_distance > 0 else 0.001
                    if amount < 0.001: amount = 0.001

                    print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {amount:.6f} {symbol.split('-')[0]} | ATR: {atr:.4f}")

                    order = traders[symbol].place_order(
                        side=side,
                        amount=amount,
                        stop_loss_percent=STOP_LOSS_PCT,
                        take_profit_percent=TAKE_PROFIT_PCT
                    )

                    if order:
                        print(f"‚úÖ –£–°–ü–ï–•! –û—Ä–¥–µ—Ä {side} –Ω–∞ {symbol} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                        total_trades += 1
                        last_signal_time[symbol] = current_time
                    else:
                        print(f"‚ùå –û–®–ò–ë–ö–ê: –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {symbol}")

                else:
                    if buy_signal or sell_signal:
                        print(f"‚ö†Ô∏è {symbol}: –°–∏–≥–Ω–∞–ª –µ—Å—Ç—å, –Ω–æ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π (score={long_score if buy_signal else short_score}) –∏–ª–∏ LSTM –Ω–µ —É–≤–µ—Ä–µ–Ω ({lstm_prob:.2%}) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")

            # ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥–∞
            if current_time - last_trailing_update.get('global', 0) > UPDATE_TRAILING_INTERVAL:
                print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä...")
                for symbol in SYMBOLS:
                    traders[symbol].update_trailing_stop()
                last_trailing_update['global'] = current_time

            # ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
            if current_time - last_test_order > TEST_INTERVAL:
                test_symbol = SYMBOLS[0]
                print(f"\nüéØ [–¢–ï–°–¢] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π BUY –Ω–∞ {test_symbol} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏...")
                traders[test_symbol].place_order(
                    side='buy',
                    amount=0.001,
                    stop_loss_percent=STOP_LOSS_PCT,
                    take_profit_percent=TAKE_PROFIT_PCT
                )
                last_test_order = current_time

            print("\nüí§ –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
            time.sleep(60)

        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {type(e).__name__}: {str(e)}")
            print("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)

# ‚úÖ –ó–ê–ü–£–°–ö –ë–û–¢–ê –ü–†–ò –ü–ï–†–í–û–ú –ó–ê–ü–†–û–°–ï
@app.before_request
def start_bot_once():
    global _bot_started
    if not _bot_started:
        thread = threading.Thread(target=run_strategy, daemon=True)
        thread.start()
        print("üöÄ [–°–ò–°–¢–ï–ú–ê] –§–æ–Ω–æ–≤—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        _bot_started = True

# ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ ‚Äî –ü–û–†–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –û–¢–ö–†–´–¢!
@app.route('/')
def wake_up():
    return "‚úÖ Quantum Edge AI Bot is LIVE on 10 cryptos!", 200

# ‚úÖ –ó–ê–ü–£–°–ö–ê–ï–ú FLASK ‚Äî –ë–ï–ó if __name__ == "__main__"
port = int(os.environ.get("PORT", 10000))
print(f"üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
app.run(host='0.0.0.0', port=port)
