# main.py
# 1. –ú–ì–ù–û–í–ï–ù–ù–û –û–¢–ö–†–´–í–ê–ï–ú –ü–û–†–¢ ‚Äî –¥–æ –∏–º–ø–æ—Ä—Ç–æ–≤
# main.py  (—Å–∞–º—ã–π –≤–µ—Ä—Ö, –¥–æ –ª—é–±—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
import os, sys, threading, time, logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger("main")
logger.info("=== MAIN.PY –°–¢–ê–†–¢–£–ï–¢ ===")

# 2. –û–°–¢–ê–õ–¨–ù–´–ï –ò–ú–ü–û–†–¢–´
import sys, logging
from flask import Flask
from data_fetcher import get_bars
from strategy import calculate_strategy_signals
from trader import BingXTrader
from lstm_model import LSTMPredictor
from trainer import train_one, load_model, download_weights, sequential_trainer
from position_monitor import start_position_monitor
from signal_cache import is_fresh_signal
from config import (USE_DEMO, LEVERAGE, RISK_PERCENT, STOP_LOSS_PCT,
                    TAKE_PROFIT_PCT, LSTM_CONFIDENCE, TIMEFRAME, SYMBOLS)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger("main")

app = Flask(__name__)
lstm_models = {s: LSTMPredictor() for s in SYMBOLS}
traders = {s: BingXTrader(symbol=s, use_demo=USE_DEMO, leverage=LEVERAGE) for s in SYMBOLS}

@app.route("/")
def wake_up():
    active = sum(1 for m in lstm_models.values() if getattr(m, 'is_trained', False))
    return f"‚úÖ Quantum Edge AI Bot LIVE | –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {active}/{len(SYMBOLS)}", 200

@app.route("/health")
def health_check():
    return "OK", 200

def initial_training():
    logger.info("=== –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (5 —ç–ø–æ—Ö) ===")
    for s in SYMBOLS:
        if train_one(s, epochs=5):
            lstm_models[s].is_trained = True
            logger.info(f"‚úÖ {s} –æ–±—É—á–µ–Ω")
        else:
            logger.warning(f"‚ùå {s} –Ω–µ –æ–±—É—á–µ–Ω")
        time.sleep(2)
    logger.info("=== –ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")

def run_strategy():
    logger.info("=== –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª ===")
    while True:
        try:
            for s in SYMBOLS:
                if not getattr(lstm_models[s], 'is_trained', False):
                    continue
                df = get_bars(s, TIMEFRAME, 500)
                if df is None or len(df) < 100:
                    continue
                df = calculate_strategy_signals(df, s, 60)
                if not is_fresh_signal(s, df):
                    continue
                buy = df['buy_signal'].iloc[-1]
                sell = df['sell_signal'].iloc[-1]
                long_score = df['long_score'].iloc[-1]
                short_score = df['short_score'].iloc[-1]
                prob = lstm_models[s].predict_next(df)
                if ((buy and long_score >= 5) or (sell and short_score >= 5)) and prob > LSTM_CONFIDENCE:
                    side = 'buy' if buy else 'sell'
                    atr = df['atr'].iloc[-1]
                    amount = max(0.001, (100 * RISK_PERCENT / 100) / (atr * 1.5))
                    logger.info(f"üéØ {side.upper()} {s} P={prob:.2%}")
                    traders[s].place_order(side, amount, STOP_LOSS_PCT, TAKE_PROFIT_PCT)
            time.sleep(60)
        except Exception as e:
            logger.error(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {e}")
            time.sleep(60)

def _log(stage: str, symbol: str, msg: str):
    logger.info(f"[{stage}] {symbol}: {msg}")

def start_all():
    logger.info("=== START_ALL() –ó–ê–ü–£–©–ï–ù ‚Äî —á–µ—Ä–µ–∑ 5-10 —Å–µ–∫ –ø–æ—è–≤—è—Ç—Å—è –≤–µ—Å–∞/–æ–±—É—á–µ–Ω–∏–µ/—Å–∏–≥–Ω–∞–ª—ã ===")
    download_weights()
    trained = 0
    for s in SYMBOLS:
        model = load_model(s)
        if model:
            model.symbol = s
            lstm_models[s] = model
            lstm_models[s].is_trained = True
            trained += 1
            _log("INIT", s, "–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ")
        else:
            _log("INIT", s, "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ‚Äì –±—É–¥–µ—Ç –æ–±—É—á–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ")
    if trained == 0:
        _log("INIT", "ALL", "–ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (—Ñ–æ–Ω)")
        threading.Thread(target=initial_training, daemon=True).start()
    else:
        missing = [s for s in SYMBOLS if not getattr(lstm_models[s], 'is_trained', False)]
        if missing:
            _log("INIT", "ALL", f"–î–æ–æ–±—É—á–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ: {missing}")
            def train_missing():
                for s in missing:
                    if train_one(s, epochs=5):
                        lstm_models[s].is_trained = True
                        _log("INIT", s, "–§–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            threading.Thread(target=train_missing, daemon=True).start()

    threading.Thread(target=run_strategy, daemon=True).start()
    threading.Thread(target=sequential_trainer, args=(SYMBOLS, 3600, 2), daemon=True).start()
    start_position_monitor(traders, SYMBOLS)
    logger.info("üöÄ Web Service + background threads –∑–∞–ø—É—â–µ–Ω—ã")

# === PATCH: –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã ===
def run_strategy():
    logger.info("=== –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω ===")
    while True:
        try:
            for s in SYMBOLS:
                if not getattr(lstm_models[s], 'is_trained', False):
                    continue
                df = get_bars(s, TIMEFRAME, 500)
                if df is None or len(df) < 100:
                    continue
                df = calculate_strategy_signals(df, s, 60)
                if not is_fresh_signal(s, df):
                    continue
                buy = df['buy_signal'].iloc[-1]
                sell = df['sell_signal'].iloc[-1]
                long_score = df['long_score'].iloc[-1]
                short_score = df['short_score'].iloc[-1]
                prob = lstm_models[s].predict_next(df)
                if ((buy and long_score >= 5) or (sell and short_score >= 5)) and prob > LSTM_CONFIDENCE:
                    side = 'buy' if buy else 'sell'
                    atr = df['atr'].iloc[-1]
                    amount = max(0.001, (100 * RISK_PERCENT / 100) / (atr * 1.5))
                    _log("SIGNAL", s, f"{side.upper()} P={prob:.2%} long_score={long_score} short_score={short_score} amt={amount:.4f}")
                    traders[s].place_order(side, amount, STOP_LOSS_PCT, TAKE_PROFIT_PCT)
            time.sleep(60)
        except Exception as e:
            logger.error(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {e}")
            time.sleep(60)

if __name__ == "__main__":
    threading.Thread(target=start_all, daemon=True).start()
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
    # ---------- GitHub-push –≤–µ—Ç–∫–∏ weights ----------
import subprocess, tempfile, shutil, os
from datetime import datetime

GH_TOKEN  = os.getenv("GH_TOKEN")                      # —É–∂–µ –≤ Environment Variables
REPO      = "soul-code-tech/quantum-edge-ai-bot"
GIT_EMAIL = "bot@quantum-edge-ai-bot.render.com"
GIT_NAME  = "QuantumEdgeBot"

def push_weights_to_github():
    """–û–±—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ weights/ ‚Üí –∫–æ–º–º–∏—Ç–∏–º –≤ –≤–µ—Ç–∫—É weights"""
    try:
        logger.info("[GIT] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ + push –≤ weights")
        work_dir = tempfile.mkdtemp()
        os.chdir(work_dir)

        # –∫–ª–æ–Ω–∏—Ä—É–µ–º –≤–µ—Ç–∫—É weights (—Å–æ–∑–¥–∞—Å—Ç—Å—è –ø—É—Å—Ç–∞—è, –µ—Å–ª–∏ –Ω–µ—Ç)
        clone_url = f"https://{GH_TOKEN}@github.com/{REPO}.git"
        subprocess.run(["git", "clone", "--branch", "weights", clone_url, "."], check=True,
                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        subprocess.run(["git", "config", "user.email", GIT_EMAIL], check=True)
        subprocess.run(["git", "config", "user.name", GIT_NAME], check=True)

        # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Å–∞
        for f in os.listdir("."):
            if f.endswith((".pkl", ".weights.h5")):
                os.remove(f)

        # –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–ø–æ 1 –º–æ–¥–µ–ª–∏)
        weights_src = os.environ.get("WEIGHTS_DIR", "/tmp/lstm_weights")
        os.makedirs(weights_src, exist_ok=True)

        trained = 0
        for symbol in SYMBOLS:
            logger.info(f"[TRAIN] {symbol}: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ (5 —ç–ø–æ—Ö)")
            if train_one(symbol, epochs=5):
                trained += 1
                logger.info(f"[TRAIN] {symbol}: –æ–±—É—á–µ–Ω–∞")
            else:
                logger.warning(f"[TRAIN] {symbol}: –Ω–µ –æ–±—É—á–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            time.sleep(1)  # —á—Ç–æ–±—ã –Ω–µ –¥–¥–æ—Å–∏—Ç—å CPU

        if trained == 0:
            logger.warning("[GIT] –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞ ‚Äî –Ω–µ—á–µ–≥–æ –ø—É—à–∏—Ç—å")
            return

        # –∫–æ–ø–∏—Ä—É–µ–º —Å–≤–µ–∂–∏–µ –≤–µ—Å–∞ –≤ –∫–ª–æ–Ω
        for f in os.listdir(weights_src):
            if f.endswith((".pkl", ".weights.h5")):
                shutil.copy(os.path.join(weights_src, f), f)

        subprocess.run(["git", "add", "."], check=True)
        msg = f"–∞–≤—Ç–æ: –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π {datetime.utcnow().strftime('%Y-%m-%d_%H:%M:%S')}"
        subprocess.run(["git", "commit", "-m", msg], check=True)
        subprocess.run(["git", "push", "origin", "weights"], check=True)

        logger.info("[GIT] ‚úÖ –í–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≤–µ—Ç–∫—É weights")
    except Exception as e:
        logger.error(f"[GIT] ‚ùå –û—à–∏–±–∫–∞ push: {e}")
    finally:
        # –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É Render
        os.chdir("/opt/render/project/src")
        shutil.rmtree(work_dir, ignore_errors=True)

# ---------- –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π start_all() ----------
def start_all():
    logger.info("=== START_ALL() –ó–ê–ü–£–©–ï–ù ===")
    download_weights()          # –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å
    trained = 0
    for s in SYMBOLS:
        if load_model(s):
            lstm_models[s].is_trained = True
            trained += 1
            logger.info(f"[LOAD] {s}: –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        else:
            logger.info(f"[LOAD] {s}: –≤–µ—Å–æ–≤ –Ω–µ—Ç ‚Äì –æ–±—É—á–∏–º—Å—è –≤–Ω—É—Ç—Ä–∏ Render")
    if trained == 0:
        logger.info("[TRAIN] –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –≤–µ—Å–æ–≤ ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
        push_weights_to_github()   # ‚Üê –æ–±—É—á–∏–º –∏ –∑–∞–ø—É—à–∏–º
    else:
        missing = [s for s in SYMBOLS if not getattr(lstm_models[s], 'is_trained', False)]
        if missing:
            logger.info(f"[TRAIN] –î–æ–æ–±—É—á–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ: {missing}")
            for s in missing:
                if train_one(s, epochs=5):
                    lstm_models[s].is_trained = True
                    logger.info(f"[TRAIN] {s}: –¥–æ–æ–±—É—á–µ–Ω–∞")
                else:
                    logger.warning(f"[TRAIN] {s}: –¥–æ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
                time.sleep(1)

    logger.info(f"=== –ò—Ç–æ–≥: {sum(getattr(m,'is_trained',False) for m in lstm_models.values())}/{len(SYMBOLS)} –º–æ–¥–µ–ª–µ–π –≥–æ—Ç–æ–≤—ã ===")

    # —Ç–æ—Ä–≥–æ–≤–ª—è –∏ –¥–æ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
    threading.Thread(target=run_strategy, daemon=True).start()
    threading.Thread(target=sequential_trainer, args=(SYMBOLS, 3600, 2), daemon=True).start()
    start_position_monitor(traders, SYMBOLS)
